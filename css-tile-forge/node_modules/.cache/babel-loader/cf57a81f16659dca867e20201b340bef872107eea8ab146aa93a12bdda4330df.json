{"ast":null,"code":"var _jsxFileName = \"/home/user/TileMonster/css-tile-forge/src/components/Preview/Preview.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Preview = ({\n  tileStyles,\n  isBlendMode\n}) => {\n  _s();\n  // 3x3 grid state, initialized to all active\n  const [grid, setGrid] = useState([...Array(3)].map(() => Array(3).fill(true)));\n\n  // Toggle a cell's active state\n  const toggleCell = (row, col) => {\n    const newGrid = grid.map((gridRow, r) => gridRow.map((cell, c) => r === row && c === col ? !cell : cell));\n    setGrid(newGrid);\n  };\n\n  // Calculate styles for a grid cell based on its neighbors and blend mode\n  const getBlendedStyles = (row, col) => {\n    if (!isBlendMode || !grid[row][col]) {\n      return grid[row][col] ? tileStyles : {};\n    }\n    const blended = {\n      ...tileStyles\n    };\n\n    // Check neighbors and remove borders if they are also active\n    const top = row > 0 && grid[row - 1][col];\n    const bottom = row < 2 && grid[row + 1][col];\n    const left = col > 0 && grid[row][col - 1];\n    const right = col < 2 && grid[row][col + 1];\n    if (top) {\n      blended.borderTop = 'none';\n      blended.borderTopLeftRadius = 0;\n      blended.borderTopRightRadius = 0;\n    }\n    if (bottom) {\n      blended.borderBottom = 'none';\n      blended.borderBottomLeftRadius = 0;\n      blended.borderBottomRightRadius = 0;\n    }\n    if (left) {\n      blended.borderLeft = 'none';\n      blended.borderTopLeftRadius = 0;\n      blended.borderBottomLeftRadius = 0;\n    }\n    if (right) {\n      blended.borderRight = 'none';\n      blended.borderTopRightRadius = 0;\n      blended.borderBottomRightRadius = 0;\n    }\n    return blended;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"preview-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"preview-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"1x1 (Reference)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"preview-tile single-tile\",\n        style: tileStyles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"preview-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"3x3 Grid (Click to Toggle)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"preview-grid\",\n        children: grid.map((row, r_idx) => row.map((_, c_idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"preview-tile\",\n          style: getBlendedStyles(r_idx, c_idx),\n          onClick: () => toggleCell(r_idx, c_idx)\n        }, `${r_idx}-${c_idx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(Preview, \"i2HeTHrHGtBXpTqcviwIyI7pyB8=\");\n_c = Preview;\nexport default Preview;\nvar _c;\n$RefreshReg$(_c, \"Preview\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Preview","tileStyles","isBlendMode","_s","grid","setGrid","Array","map","fill","toggleCell","row","col","newGrid","gridRow","r","cell","c","getBlendedStyles","blended","top","bottom","left","right","borderTop","borderTopLeftRadius","borderTopRightRadius","borderBottom","borderBottomLeftRadius","borderBottomRightRadius","borderLeft","borderRight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","r_idx","_","c_idx","onClick","_c","$RefreshReg$"],"sources":["/home/user/TileMonster/css-tile-forge/src/components/Preview/Preview.tsx"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react';\n\ninterface PreviewProps {\n  tileStyles: React.CSSProperties;\n  isBlendMode: boolean;\n}\n\nconst Preview: React.FC<PreviewProps> = ({ tileStyles, isBlendMode }) => {\n  // 3x3 grid state, initialized to all active\n  const [grid, setGrid] = useState<boolean[][]>(\n    [...Array(3)].map(() => Array(3).fill(true))\n  );\n\n  // Toggle a cell's active state\n  const toggleCell = (row: number, col: number) => {\n    const newGrid = grid.map((gridRow, r) =>\n      gridRow.map((cell, c) => (r === row && c === col ? !cell : cell))\n    );\n    setGrid(newGrid);\n  };\n\n  // Calculate styles for a grid cell based on its neighbors and blend mode\n  const getBlendedStyles = (row: number, col: number): React.CSSProperties => {\n    if (!isBlendMode || !grid[row][col]) {\n      return grid[row][col] ? tileStyles : {};\n    }\n\n    const blended: React.CSSProperties = { ...tileStyles };\n\n    // Check neighbors and remove borders if they are also active\n    const top = row > 0 && grid[row - 1][col];\n    const bottom = row < 2 && grid[row + 1][col];\n    const left = col > 0 && grid[row][col - 1];\n    const right = col < 2 && grid[row][col + 1];\n\n    if (top) {\n      blended.borderTop = 'none';\n      blended.borderTopLeftRadius = 0;\n      blended.borderTopRightRadius = 0;\n    }\n    if (bottom) {\n      blended.borderBottom = 'none';\n      blended.borderBottomLeftRadius = 0;\n      blended.borderBottomRightRadius = 0;\n    }\n    if (left) {\n      blended.borderLeft = 'none';\n      blended.borderTopLeftRadius = 0;\n      blended.borderBottomLeftRadius = 0;\n    }\n    if (right) {\n      blended.borderRight = 'none';\n      blended.borderTopRightRadius = 0;\n      blended.borderBottomRightRadius = 0;\n    }\n\n    return blended;\n  };\n\n  return (\n    <div className=\"preview-section\">\n      <div className=\"preview-container\">\n        <h3>1x1 (Reference)</h3>\n        <div className=\"preview-tile single-tile\" style={tileStyles}></div>\n      </div>\n      <div className=\"preview-container\">\n        <h3>3x3 Grid (Click to Toggle)</h3>\n        <div className=\"preview-grid\">\n          {grid.map((row, r_idx) =>\n            row.map((_, c_idx) => (\n              <div\n                key={`${r_idx}-${c_idx}`}\n                className=\"preview-tile\"\n                style={getBlendedStyles(r_idx, c_idx)}\n                onClick={() => toggleCell(r_idx, c_idx)}\n              />\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Preview;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}