{"ast":null,"code":"var _jsxFileName = \"/home/user/TileMonster/css-tile-forge/src/components/TextureCreator/TextureCreator.tsx\";\nimport React from 'react';\nimport AttributePanel from '../AttributePanel/AttributePanel';\nimport { CSS_ATTRIBUTES } from '../../data/css-attributes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// --- Helper functions for randomization ---\nconst getRandomColor = () => `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0')}`;\nconst getRandomValue = (min, max, step) => {\n  const steps = (max - min) / step;\n  return parseFloat((min + Math.floor(Math.random() * (steps + 1)) * step).toFixed(2));\n};\nconst generateRandomValueFor = definition => {\n  var _definition$subAttrib;\n  switch (definition.controlType) {\n    case 'color':\n      return getRandomColor();\n    case 'slider':\n      return getRandomValue(definition.min, definition.max, definition.step);\n    case 'select':\n      const randomIndex = Math.floor(Math.random() * definition.options.length);\n      return definition.options[randomIndex].value;\n    case 'checkbox':\n      return Math.random() > 0.5;\n    case 'multi':\n      const multiValue = {};\n      (_definition$subAttrib = definition.subAttributes) === null || _definition$subAttrib === void 0 ? void 0 : _definition$subAttrib.forEach(subDef => {\n        multiValue[subDef.id] = generateRandomValueFor(subDef);\n      });\n      return multiValue;\n    default:\n      return definition.defaultValue;\n  }\n};\n// --- End of Randomization Helpers ---\n\nconst TextureCreator = ({\n  saveToPalette,\n  activeAttributes,\n  setActiveAttributes,\n  tileStyles\n}) => {\n  const handleRandomize = () => {\n    const newAttributes = [];\n    const attrCount = Math.floor(Math.random() * 4) + 2;\n    const availableAttrs = [...CSS_ATTRIBUTES];\n    for (let i = 0; i < attrCount && availableAttrs.length > 0; i++) {\n      const randomIndex = Math.floor(Math.random() * availableAttrs.length);\n      const randomDef = availableAttrs[randomIndex];\n      availableAttrs.splice(randomIndex, 1);\n      if (CSS_ATTRIBUTES.find(a => a.category === 'Background' && a.id !== randomDef.id && newAttributes.some(na => na.definition.category === 'Background'))) continue;\n      newAttributes.push({\n        id: `rand-${Date.now()}-${i}`,\n        definition: randomDef,\n        value: generateRandomValueFor(randomDef)\n      });\n    }\n    setActiveAttributes(newAttributes);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"texture-creator\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Texture Creator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        gap: '12px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRandomize,\n        children: \"Randomize\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => saveToPalette(tileStyles),\n        children: \"Save to Palette\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AttributePanel, {\n      attributes: activeAttributes,\n      setAttributes: setActiveAttributes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_c = TextureCreator;\nexport default TextureCreator;\nvar _c;\n$RefreshReg$(_c, \"TextureCreator\");","map":{"version":3,"names":["React","AttributePanel","CSS_ATTRIBUTES","jsxDEV","_jsxDEV","getRandomColor","Math","floor","random","toString","padStart","getRandomValue","min","max","step","steps","parseFloat","toFixed","generateRandomValueFor","definition","_definition$subAttrib","controlType","randomIndex","options","length","value","multiValue","subAttributes","forEach","subDef","id","defaultValue","TextureCreator","saveToPalette","activeAttributes","setActiveAttributes","tileStyles","handleRandomize","newAttributes","attrCount","availableAttrs","i","randomDef","splice","find","a","category","some","na","push","Date","now","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","flexDirection","gap","onClick","attributes","setAttributes","_c","$RefreshReg$"],"sources":["/home/user/TileMonster/css-tile-forge/src/components/TextureCreator/TextureCreator.tsx"],"sourcesContent":["\nimport React from 'react';\nimport AttributePanel from '../AttributePanel/AttributePanel';\nimport { CSS_ATTRIBUTES, CssAttribute } from '../../data/css-attributes';\nimport { ActiveAttribute, TileStyle } from '../../data/types';\n\ninterface TextureCreatorProps {\n  saveToPalette: (style: TileStyle) => void;\n  activeAttributes: ActiveAttribute[];\n  setActiveAttributes: React.Dispatch<React.SetStateAction<ActiveAttribute[]>>;\n  tileStyles: TileStyle;\n}\n\n// --- Helper functions for randomization ---\nconst getRandomColor = () => `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0')}`;\n\nconst getRandomValue = (min: number, max: number, step: number) => {\n  const steps = (max - min) / step;\n  return parseFloat((min + Math.floor(Math.random() * (steps + 1)) * step).toFixed(2));\n};\n\nconst generateRandomValueFor = (definition: CssAttribute): any => {\n  switch (definition.controlType) {\n    case 'color':\n      return getRandomColor();\n    case 'slider':\n      return getRandomValue(definition.min!, definition.max!, definition.step!);\n    case 'select':\n      const randomIndex = Math.floor(Math.random() * definition.options!.length);\n      return definition.options![randomIndex].value;\n    case 'checkbox':\n      return Math.random() > 0.5;\n    case 'multi':\n      const multiValue: { [key: string]: any } = {};\n      definition.subAttributes?.forEach(subDef => {\n        multiValue[subDef.id] = generateRandomValueFor(subDef as any);\n      });\n      return multiValue;\n    default:\n      return definition.defaultValue;\n  }\n};\n// --- End of Randomization Helpers ---\n\nconst TextureCreator: React.FC<TextureCreatorProps> = ({ saveToPalette, activeAttributes, setActiveAttributes, tileStyles }) => {\n\n  const handleRandomize = () => {\n    const newAttributes: ActiveAttribute[] = [];\n    const attrCount = Math.floor(Math.random() * 4) + 2;\n    const availableAttrs = [...CSS_ATTRIBUTES];\n\n    for (let i = 0; i < attrCount && availableAttrs.length > 0; i++) {\n      const randomIndex = Math.floor(Math.random() * availableAttrs.length);\n      const randomDef = availableAttrs[randomIndex];\n      availableAttrs.splice(randomIndex, 1);\n      if(CSS_ATTRIBUTES.find(a => a.category === 'Background' && a.id !== randomDef.id && newAttributes.some(na => na.definition.category === 'Background'))) continue;\n\n      newAttributes.push({\n        id: `rand-${Date.now()}-${i}`,\n        definition: randomDef,\n        value: generateRandomValueFor(randomDef),\n      });\n    }\n    setActiveAttributes(newAttributes);\n  };\n\n  return (\n    <div className=\"texture-creator\">\n      <h2>Texture Creator</h2>\n      <div className=\"controls\" style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>\n        <button onClick={handleRandomize}>Randomize</button>\n        <button onClick={() => saveToPalette(tileStyles)}>Save to Palette</button>\n      </div>\n      <AttributePanel attributes={activeAttributes} setAttributes={setActiveAttributes} />\n    </div>\n  );\n};\n\nexport default TextureCreator;\n"],"mappings":";AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,cAAc,MAAM,kCAAkC;AAC7D,SAASC,cAAc,QAAsB,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUzE;AACA,MAAMC,cAAc,GAAGA,CAAA,KAAM,IAAIC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,QAAQ,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;AAErG,MAAMC,cAAc,GAAGA,CAACC,GAAW,EAAEC,GAAW,EAAEC,IAAY,KAAK;EACjE,MAAMC,KAAK,GAAG,CAACF,GAAG,GAAGD,GAAG,IAAIE,IAAI;EAChC,OAAOE,UAAU,CAAC,CAACJ,GAAG,GAAGN,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIO,KAAK,GAAG,CAAC,CAAC,CAAC,GAAGD,IAAI,EAAEG,OAAO,CAAC,CAAC,CAAC,CAAC;AACtF,CAAC;AAED,MAAMC,sBAAsB,GAAIC,UAAwB,IAAU;EAAA,IAAAC,qBAAA;EAChE,QAAQD,UAAU,CAACE,WAAW;IAC5B,KAAK,OAAO;MACV,OAAOhB,cAAc,CAAC,CAAC;IACzB,KAAK,QAAQ;MACX,OAAOM,cAAc,CAACQ,UAAU,CAACP,GAAG,EAAGO,UAAU,CAACN,GAAG,EAAGM,UAAU,CAACL,IAAK,CAAC;IAC3E,KAAK,QAAQ;MACX,MAAMQ,WAAW,GAAGhB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGW,UAAU,CAACI,OAAO,CAAEC,MAAM,CAAC;MAC1E,OAAOL,UAAU,CAACI,OAAO,CAAED,WAAW,CAAC,CAACG,KAAK;IAC/C,KAAK,UAAU;MACb,OAAOnB,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG;IAC5B,KAAK,OAAO;MACV,MAAMkB,UAAkC,GAAG,CAAC,CAAC;MAC7C,CAAAN,qBAAA,GAAAD,UAAU,CAACQ,aAAa,cAAAP,qBAAA,uBAAxBA,qBAAA,CAA0BQ,OAAO,CAACC,MAAM,IAAI;QAC1CH,UAAU,CAACG,MAAM,CAACC,EAAE,CAAC,GAAGZ,sBAAsB,CAACW,MAAa,CAAC;MAC/D,CAAC,CAAC;MACF,OAAOH,UAAU;IACnB;MACE,OAAOP,UAAU,CAACY,YAAY;EAClC;AACF,CAAC;AACD;;AAEA,MAAMC,cAA6C,GAAGA,CAAC;EAAEC,aAAa;EAAEC,gBAAgB;EAAEC,mBAAmB;EAAEC;AAAW,CAAC,KAAK;EAE9H,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,aAAgC,GAAG,EAAE;IAC3C,MAAMC,SAAS,GAAGjC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IACnD,MAAMgC,cAAc,GAAG,CAAC,GAAGtC,cAAc,CAAC;IAE1C,KAAK,IAAIuC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,IAAIC,cAAc,CAAChB,MAAM,GAAG,CAAC,EAAEiB,CAAC,EAAE,EAAE;MAC/D,MAAMnB,WAAW,GAAGhB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGgC,cAAc,CAAChB,MAAM,CAAC;MACrE,MAAMkB,SAAS,GAAGF,cAAc,CAAClB,WAAW,CAAC;MAC7CkB,cAAc,CAACG,MAAM,CAACrB,WAAW,EAAE,CAAC,CAAC;MACrC,IAAGpB,cAAc,CAAC0C,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,KAAK,YAAY,IAAID,CAAC,CAACf,EAAE,KAAKY,SAAS,CAACZ,EAAE,IAAIQ,aAAa,CAACS,IAAI,CAACC,EAAE,IAAIA,EAAE,CAAC7B,UAAU,CAAC2B,QAAQ,KAAK,YAAY,CAAC,CAAC,EAAE;MAExJR,aAAa,CAACW,IAAI,CAAC;QACjBnB,EAAE,EAAE,QAAQoB,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIV,CAAC,EAAE;QAC7BtB,UAAU,EAAEuB,SAAS;QACrBjB,KAAK,EAAEP,sBAAsB,CAACwB,SAAS;MACzC,CAAC,CAAC;IACJ;IACAP,mBAAmB,CAACG,aAAa,CAAC;EACpC,CAAC;EAED,oBACElC,OAAA;IAAKgD,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BjD,OAAA;MAAAiD,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBrD,OAAA;MAAKgD,SAAS,EAAC,UAAU;MAACM,KAAK,EAAE;QAAEC,OAAO,EAAE,MAAM;QAAEC,aAAa,EAAE,QAAQ;QAAEC,GAAG,EAAE;MAAO,CAAE;MAAAR,QAAA,gBACzFjD,OAAA;QAAQ0D,OAAO,EAAEzB,eAAgB;QAAAgB,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACpDrD,OAAA;QAAQ0D,OAAO,EAAEA,CAAA,KAAM7B,aAAa,CAACG,UAAU,CAAE;QAAAiB,QAAA,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvE,CAAC,eACNrD,OAAA,CAACH,cAAc;MAAC8D,UAAU,EAAE7B,gBAAiB;MAAC8B,aAAa,EAAE7B;IAAoB;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjF,CAAC;AAEV,CAAC;AAACQ,EAAA,GAhCIjC,cAA6C;AAkCnD,eAAeA,cAAc;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}