{"ast":null,"code":"var _jsxFileName = \"/home/user/TileMonster/css-tile-forge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TextureCreator from './components/TextureCreator/TextureCreator';\nimport Sandbox from './components/Sandbox/Sandbox';\nimport Export from './components/Export/Export';\nimport { CSS_ATTRIBUTES } from './data/css-attributes';\nimport { buildTransformString } from './utils/styleHelpers';\nimport './App.css';\n\n// Each cell in 32x32 grid stores either null or index into palette\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create empty 32x32 grid with null cells\nconst createEmptyGrid = () => Array.from({\n  length: 32\n}, () => Array(32).fill(null));\nconst defaultTileStyle = {\n  backgroundColor: '#d3d3d3',\n  // light gray\n  border: '2px solid darkgrey',\n  borderRadius: '8px'\n};\nfunction App() {\n  _s();\n  // Palette of saved tile styles\n  const [palette, setPalette] = useState([]);\n\n  // 32x32 sandbox grid storing indexes into palette or null\n  const [grid, setGrid] = useState(createEmptyGrid());\n\n  // Index of selected palette style for painting\n  const [selectedStyleIndex, setSelectedStyleIndex] = useState(null);\n  const [activeAttributes, setActiveAttributes] = useState([]);\n  const [tileStyles, setTileStyles] = useState(defaultTileStyle);\n  const [isBlendMode, setIsBlendMode] = useState(false);\n  useEffect(() => {\n    const newStyles = {};\n    const gradients = [];\n    const filters = [];\n    let transformAttr = null;\n    if (activeAttributes.length === 0) {\n      setTileStyles(defaultTileStyle);\n      return;\n    }\n    activeAttributes.forEach(({\n      definition,\n      value\n    }) => {\n      switch (definition.id) {\n        case 'backgroundColor':\n          newStyles.backgroundColor = value;\n          break;\n        case 'backgroundGradient':\n          gradients.push(`linear-gradient(${value.angle}deg, ${value.colors[0]}, ${value.colors[1]})`);\n          break;\n        case 'backgroundPosition':\n          newStyles.backgroundPosition = value;\n          break;\n        case 'backgroundSize':\n          newStyles.backgroundSize = value;\n          break;\n        case 'backgroundRepeat':\n          newStyles.backgroundRepeat = value;\n          break;\n        case 'clipPath':\n          newStyles.clipPath = value;\n          break;\n        case 'boxShadow':\n          const shadow = `${value.inset ? 'inset ' : ''}${value.offsetX}px ${value.offsetY}px ${value.blurRadius}px ${value.spreadRadius}px ${value.color}`;\n          newStyles.boxShadow = newStyles.boxShadow ? `${newStyles.boxShadow}, ${shadow}` : shadow;\n          break;\n        case 'linear-gradient':\n          gradients.push(`linear-gradient(${value.angle}deg, ${value.color1}, ${value.color2})`);\n          break;\n        case 'radial-gradient':\n          gradients.push(`radial-gradient(circle, ${value.color1}, ${value.color2})`);\n          break;\n        case 'filter':\n          Object.keys(value).forEach(key => {\n            var _CSS_ATTRIBUTES$find, _CSS_ATTRIBUTES$find$;\n            const subDef = (_CSS_ATTRIBUTES$find = CSS_ATTRIBUTES.find(d => d.id === 'filter')) === null || _CSS_ATTRIBUTES$find === void 0 ? void 0 : (_CSS_ATTRIBUTES$find$ = _CSS_ATTRIBUTES$find.subAttributes) === null || _CSS_ATTRIBUTES$find$ === void 0 ? void 0 : _CSS_ATTRIBUTES$find$.find(d => d.id === key);\n            if (subDef && value[key] !== subDef.defaultValue) {\n              const unit = key === 'hueRotate' ? 'deg' : key === 'blur' ? 'px' : '';\n              filters.push(`${key}(${value[key]}${unit})`);\n            }\n          });\n          break;\n        case 'transform':\n          transformAttr = value;\n          break;\n        case 'borderTop':\n        case 'borderRight':\n        case 'borderBottom':\n        case 'borderLeft':\n          {\n            const side = definition.id.substring(6);\n            const width = value[`border${side}Width`];\n            const style = value[`border${side}Style`];\n            const color = value[`border${side}Color`];\n            const radius = value[`border${side}Radius`];\n            if (width > 0) {\n              newStyles[`border${side}Width`] = `${width}px`;\n              newStyles[`border${side}Style`] = style;\n              newStyles[`border${side}Color`] = color;\n            } else {\n              newStyles[`border${side}Width`] = '0px';\n            }\n            if (radius > 0) {\n              if (side === 'Top') {\n                newStyles.borderTopLeftRadius = `${radius}px`;\n                newStyles.borderTopRightRadius = `${radius}px`;\n              } else if (side === 'Right') {\n                newStyles.borderTopRightRadius = `${radius}px`;\n                newStyles.borderBottomRightRadius = `${radius}px`;\n              } else if (side === 'Bottom') {\n                newStyles.borderBottomLeftRadius = `${radius}px`;\n                newStyles.borderBottomRightRadius = `${radius}px`;\n              } else if (side === 'Left') {\n                newStyles.borderTopLeftRadius = `${radius}px`;\n                newStyles.borderBottomLeftRadius = `${radius}px`;\n              }\n            }\n            break;\n          }\n      }\n    });\n    if (gradients.length > 0) newStyles.backgroundImage = gradients.join(', ');\n    if (filters.length > 0) newStyles.filter = filters.join(' ');\n    if (transformAttr) {\n      newStyles.transform = buildTransformString(transformAttr);\n    }\n    setTileStyles(newStyles);\n  }, [activeAttributes]);\n\n  // Add current style to palette and auto-select it\n  const saveStyleToPalette = style => {\n    const finalStyle = {\n      ...tileStyles,\n      blend: isBlendMode,\n      transform: tileStyles.transform // Already in tileStyles\n    };\n    setPalette(prev => {\n      const newPalette = [...prev, finalStyle];\n      setSelectedStyleIndex(newPalette.length - 1);\n      return newPalette;\n    });\n  };\n\n  // Paint grid cell with selected style index\n  const paintCell = (row, col) => {\n    if (selectedStyleIndex === null) return;\n    const newGrid = grid.map(r => [...r]);\n    newGrid[row][col] = selectedStyleIndex;\n    setGrid(newGrid);\n  };\n  const clearGrid = () => {\n    setGrid(createEmptyGrid());\n  };\n  const randomizeGrid = () => {\n    if (palette.length === 0) {\n      alert(\"Please save at least one style to the palette before randomizing.\");\n      return;\n    }\n    const newGrid = grid.map(row => row.map(() => {\n      // Allow for some empty cells\n      if (Math.random() > 0.7) {\n        return null;\n      }\n      return Math.floor(Math.random() * palette.length);\n    }));\n    setGrid(newGrid);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CSS-Tile-Forge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"App-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-column\",\n        children: /*#__PURE__*/_jsxDEV(TextureCreator, {\n          saveToPalette: saveStyleToPalette,\n          activeAttributes: activeAttributes,\n          setActiveAttributes: setActiveAttributes,\n          tileStyles: tileStyles\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-column\",\n        children: /*#__PURE__*/_jsxDEV(Sandbox, {\n          palette: palette,\n          grid: grid,\n          paintCell: paintCell,\n          clearGrid: clearGrid,\n          randomizeGrid: randomizeGrid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-column\",\n        children: /*#__PURE__*/_jsxDEV(Export, {\n          palette: palette,\n          grid: grid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"e7VY2YS9dZpkhYMtSWbogs8FWqk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TextureCreator","Sandbox","Export","CSS_ATTRIBUTES","buildTransformString","jsxDEV","_jsxDEV","createEmptyGrid","Array","from","length","fill","defaultTileStyle","backgroundColor","border","borderRadius","App","_s","palette","setPalette","grid","setGrid","selectedStyleIndex","setSelectedStyleIndex","activeAttributes","setActiveAttributes","tileStyles","setTileStyles","isBlendMode","setIsBlendMode","newStyles","gradients","filters","transformAttr","forEach","definition","value","id","push","angle","colors","backgroundPosition","backgroundSize","backgroundRepeat","clipPath","shadow","inset","offsetX","offsetY","blurRadius","spreadRadius","color","boxShadow","color1","color2","Object","keys","key","_CSS_ATTRIBUTES$find","_CSS_ATTRIBUTES$find$","subDef","find","d","subAttributes","defaultValue","unit","side","substring","width","style","radius","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","backgroundImage","join","filter","transform","saveStyleToPalette","finalStyle","blend","prev","newPalette","paintCell","row","col","newGrid","map","r","clearGrid","randomizeGrid","alert","Math","random","floor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","saveToPalette","_c","$RefreshReg$"],"sources":["/home/user/TileMonster/css-tile-forge/src/App.tsx"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport TextureCreator from './components/TextureCreator/TextureCreator';\nimport Sandbox from './components/Sandbox/Sandbox';\nimport Export from './components/Export/Export';\nimport StylePalette from './components/StylePalette/StylePalette';\nimport Preview from './components/Preview/Preview';\nimport { TileStyle, ActiveAttribute } from './data/types';\nimport { CSS_ATTRIBUTES } from './data/css-attributes';\nimport { buildTransformString } from './utils/styleHelpers';\nimport './App.css';\n\n\n// Each cell in 32x32 grid stores either null or index into palette\ntype GridCell = number | null;\n\n\n// Create empty 32x32 grid with null cells\nconst createEmptyGrid = (): GridCell[][] =>\n  Array.from({ length: 32 }, () => Array(32).fill(null));\n\nconst defaultTileStyle: TileStyle = {\n    backgroundColor: '#d3d3d3', // light gray\n    border: '2px solid darkgrey',\n    borderRadius: '8px',\n  };\n\nfunction App() {\n  // Palette of saved tile styles\n  const [palette, setPalette] = useState<TileStyle[]>([]);\n\n  // 32x32 sandbox grid storing indexes into palette or null\n  const [grid, setGrid] = useState<GridCell[][]>(createEmptyGrid());\n\n  // Index of selected palette style for painting\n  const [selectedStyleIndex, setSelectedStyleIndex] = useState<number | null>(null);\n\n  const [activeAttributes, setActiveAttributes] = useState<ActiveAttribute[]>([]);\n  const [tileStyles, setTileStyles] = useState<TileStyle>(defaultTileStyle);\n  const [isBlendMode, setIsBlendMode] = useState<boolean>(false);\n\n  useEffect(() => {\n    const newStyles: React.CSSProperties = {};\n    const gradients: string[] = [];\n    const filters: string[] = [];\n    let transformAttr: any = null;\n\n    if (activeAttributes.length === 0) {\n        setTileStyles(defaultTileStyle);\n        return;\n    }\n\n    activeAttributes.forEach(({ definition, value }) => {\n      switch (definition.id) {\n        case 'backgroundColor':\n          newStyles.backgroundColor = value;\n          break;\n        case 'backgroundGradient':\n          gradients.push(`linear-gradient(${value.angle}deg, ${value.colors[0]}, ${value.colors[1]})`);\n          break;\n        case 'backgroundPosition': newStyles.backgroundPosition = value; break;\n        case 'backgroundSize': newStyles.backgroundSize = value; break;\n        case 'backgroundRepeat': newStyles.backgroundRepeat = value; break;\n        case 'clipPath': newStyles.clipPath = value; break;\n\n        case 'boxShadow':\n          const shadow = `${value.inset ? 'inset ' : ''}${value.offsetX}px ${value.offsetY}px ${value.blurRadius}px ${value.spreadRadius}px ${value.color}`;\n          newStyles.boxShadow = newStyles.boxShadow ? `${newStyles.boxShadow}, ${shadow}` : shadow;\n          break;\n\n        case 'linear-gradient':\n          gradients.push(`linear-gradient(${value.angle}deg, ${value.color1}, ${value.color2})`);\n          break;\n        case 'radial-gradient':\n          gradients.push(`radial-gradient(circle, ${value.color1}, ${value.color2})`);\n          break;\n        case 'filter':\n          Object.keys(value).forEach(key => {\n            const subDef = CSS_ATTRIBUTES.find(d => d.id === 'filter')?.subAttributes?.find(d => d.id === key);\n            if (subDef && value[key] !== subDef.defaultValue) {\n              const unit = key === 'hueRotate' ? 'deg' : key === 'blur' ? 'px' : '';\n              filters.push(`${key}(${value[key]}${unit})`);\n            }\n          });\n          break;\n        case 'transform':\n            transformAttr = value;\n            break;\n        case 'borderTop':\n        case 'borderRight':\n        case 'borderBottom':\n        case 'borderLeft': {\n            const side = definition.id.substring(6);\n            const width = value[`border${side}Width`];\n            const style = value[`border${side}Style`];\n            const color = value[`border${side}Color`];\n            const radius = value[`border${side}Radius`];\n\n            if (width > 0) {\n                newStyles[`border${side}Width`] = `${width}px`;\n                newStyles[`border${side}Style`] = style;\n                newStyles[`border${side}Color`] = color;\n            } else {\n                newStyles[`border${side}Width`] = '0px';\n            }\n            \n            if (radius > 0) {\n                if(side === 'Top') {\n                    newStyles.borderTopLeftRadius = `${radius}px`;\n                    newStyles.borderTopRightRadius = `${radius}px`;\n                } else if (side === 'Right') {\n                    newStyles.borderTopRightRadius = `${radius}px`;\n                    newStyles.borderBottomRightRadius = `${radius}px`;\n                } else if (side === 'Bottom') {\n                    newStyles.borderBottomLeftRadius = `${radius}px`;\n                    newStyles.borderBottomRightRadius = `${radius}px`;\n                } else if (side === 'Left') {\n                    newStyles.borderTopLeftRadius = `${radius}px`;\n                    newStyles.borderBottomLeftRadius = `${radius}px`;\n                }\n            }\n\n            break;\n        }\n      }\n    });\n\n    if (gradients.length > 0) newStyles.backgroundImage = gradients.join(', ');\n    if (filters.length > 0) newStyles.filter = filters.join(' ');\n    if (transformAttr) {\n        newStyles.transform = buildTransformString(transformAttr);\n    }\n\n    setTileStyles(newStyles);\n  }, [activeAttributes]);\n\n\n  // Add current style to palette and auto-select it\n  const saveStyleToPalette = (style: TileStyle) => {\n    const finalStyle: TileStyle = {\n        ...tileStyles,\n        blend: isBlendMode,\n        transform: tileStyles.transform, // Already in tileStyles\n      };\n    setPalette(prev => {\n      const newPalette = [...prev, finalStyle];\n      setSelectedStyleIndex(newPalette.length - 1);\n      return newPalette;\n    });\n  };\n\n  // Paint grid cell with selected style index\n  const paintCell = (row: number, col: number) => {\n    if (selectedStyleIndex === null) return;\n    const newGrid = grid.map(r => [...r]);\n    newGrid[row][col] = selectedStyleIndex;\n    setGrid(newGrid);\n  };\n\n  const clearGrid = () => {\n    setGrid(createEmptyGrid());\n  };\n\n  const randomizeGrid = () => {\n    if (palette.length === 0) {\n      alert(\"Please save at least one style to the palette before randomizing.\");\n      return;\n    }\n    const newGrid = grid.map(row => \n      row.map(() => {\n        // Allow for some empty cells\n        if (Math.random() > 0.7) {\n            return null;\n        }\n        return Math.floor(Math.random() * palette.length)\n      })\n    );\n    setGrid(newGrid);\n  };\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>CSS-Tile-Forge</h1>\n      </header>\n      <main className=\"App-main\">\n        <div className=\"left-column\">\n            <TextureCreator\n              saveToPalette={saveStyleToPalette}\n              activeAttributes={activeAttributes}\n              setActiveAttributes={setActiveAttributes}\n              tileStyles={tileStyles}\n            />\n        </div>\n        <div className=\"center-column\">\n            <Sandbox\n              palette={palette}\n              grid={grid}\n              paintCell={paintCell}\n              clearGrid={clearGrid}\n              randomizeGrid={randomizeGrid}\n            />\n        </div>\n        <div className=\"right-column\">\n            <Export\n              palette={palette}\n              grid={grid}\n            />\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}