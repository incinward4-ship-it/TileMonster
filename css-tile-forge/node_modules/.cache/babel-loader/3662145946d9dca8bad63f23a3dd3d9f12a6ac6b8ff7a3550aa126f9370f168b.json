{"ast":null,"code":"var _jsxFileName = \"/home/user/TileMonster/css-tile-forge/src/components/Export/Export.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Export = ({\n  palette,\n  grid\n}) => {\n  const formatCssProperties = styles => {\n    return Object.entries(styles).map(([key, value]) => {\n      const cssKey = key.replace(/[A-Z]/g, letter => `-${letter.toLowerCase()}`);\n      return `  ${cssKey}: ${value};`;\n    }).join('\\n');\n  };\n  const generateCss = () => {\n    return palette.map((style, index) => {\n      return `.tile-${index} {\\n${formatCssProperties(style)}\\n}`;\n    }).join('\\n\\n');\n  };\n  const generateHtml = () => {\n    return `<div class=\"grid-container\">\\n${grid.map(row => `  <div class=\"grid-row\">\\n${row.map(cell => `    <div class=\"grid-cell ${cell !== null ? `tile-${cell}` : ''}\"></div>`).join('\\n')}\\n  </div>`).join('\\n')}\\n</div>`;\n  };\n  const downloadFile = (content, fileName, mimeType) => {\n    const blob = new Blob([content], {\n      type: mimeType\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"export-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Export\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"CSS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: generateCss()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => downloadFile(generateCss(), 'styles.css', 'text/css'),\n      children: \"Download CSS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"HTML\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: generateHtml()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => downloadFile(generateHtml(), 'index.html', 'text/html'),\n      children: \"Download HTML\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_c = Export;\nexport default Export;\nvar _c;\n$RefreshReg$(_c, \"Export\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Export","palette","grid","formatCssProperties","styles","Object","entries","map","key","value","cssKey","replace","letter","toLowerCase","join","generateCss","style","index","generateHtml","row","cell","downloadFile","content","fileName","mimeType","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","className","children","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/user/TileMonster/css-tile-forge/src/components/Export/Export.tsx"],"sourcesContent":["\nimport React from 'react';\n\ninterface ExportProps {\n  palette: React.CSSProperties[];\n  grid: (number | null)[][];\n}\n\nconst Export: React.FC<ExportProps> = ({ palette, grid }) => {\n\n  const formatCssProperties = (styles: React.CSSProperties): string => {\n    return Object.entries(styles)\n      .map(([key, value]) => {\n        const cssKey = key.replace(/[A-Z]/g, (letter) => `-${letter.toLowerCase()}`);\n        return `  ${cssKey}: ${value};`;\n      })\n      .join('\\n');\n  };\n\n  const generateCss = () => {\n    return palette.map((style, index) => {\n      return `.tile-${index} {\\n${formatCssProperties(style)}\\n}`;\n    }).join('\\n\\n');\n  };\n\n  const generateHtml = () => {\n    return `<div class=\"grid-container\">\\n${grid.map(row => \n      `  <div class=\"grid-row\">\\n${row.map(cell => \n        `    <div class=\"grid-cell ${cell !== null ? `tile-${cell}` : ''}\"></div>`\n      ).join('\\n')}\\n  </div>`\n    ).join('\\n')}\\n</div>`;\n  };\n\n  const downloadFile = (content: string, fileName: string, mimeType: string) => {\n    const blob = new Blob([content], { type: mimeType });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"export-section\">\n      <h3>Export</h3>\n      <h4>CSS</h4>\n      <pre>{generateCss()}</pre>\n      <button onClick={() => downloadFile(generateCss(), 'styles.css', 'text/css')}>Download CSS</button>\n      <h4>HTML</h4>\n      <pre>{generateHtml()}</pre>\n      <button onClick={() => downloadFile(generateHtml(), 'index.html', 'text/html')}>Download HTML</button>\n    </div>\n  );\n};\n\nexport default Export;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}