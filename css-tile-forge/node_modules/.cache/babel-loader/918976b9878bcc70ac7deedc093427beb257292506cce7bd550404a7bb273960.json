{"ast":null,"code":"var _jsxFileName = \"/home/user/TileMonster/css-tile-forge/src/components/Sandbox/Sandbox.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useLayoutEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MIN_GRID_SIZE = 16;\nconst MAX_GRID_SIZE = 64;\nconst ZOOM_LEVELS = [12, 18, 24]; // Cell sizes in pixels\n\nconst Sandbox = ({\n  palette,\n  grid,\n  paintCell,\n  clearGrid,\n  randomizeGrid,\n  setGrid\n}) => {\n  _s();\n  var _grid$;\n  const [isPainting, setIsPainting] = useState(false);\n  const [showGridLines, setShowGridLines] = useState(true);\n  const [zoomLevel, setZoomLevel] = useState(1); // Index for ZOOM_LEVELS\n  const [gridDimensions, setGridDimensions] = useState({\n    rows: grid.length || 16,\n    cols: ((_grid$ = grid[0]) === null || _grid$ === void 0 ? void 0 : _grid$.length) || 16\n  });\n  const gridContainerRef = useRef(null);\n  useLayoutEffect(() => {\n    const updateGridSize = () => {\n      if (gridContainerRef.current) {\n        const {\n          width,\n          height\n        } = gridContainerRef.current.getBoundingClientRect();\n        const cellSize = ZOOM_LEVELS[zoomLevel] + (showGridLines ? 1 : 0);\n        const newCols = Math.max(MIN_GRID_SIZE, Math.min(MAX_GRID_SIZE, Math.floor(width / cellSize)));\n        const newRows = Math.max(MIN_GRID_SIZE, Math.min(MAX_GRID_SIZE, Math.floor(height / cellSize)));\n        if (newRows !== gridDimensions.rows || newCols !== gridDimensions.cols) {\n          setGridDimensions({\n            rows: newRows,\n            cols: newCols\n          });\n\n          // Resize grid data, preserving existing painted cells\n          const newGrid = Array.from({\n            length: newRows\n          }, (_, r) => Array.from({\n            length: newCols\n          }, (_, c) => {\n            var _grid$2;\n            return r < grid.length && c < (((_grid$2 = grid[0]) === null || _grid$2 === void 0 ? void 0 : _grid$2.length) || 0) && grid[r] ? grid[r][c] : null;\n          }));\n          setGrid(newGrid);\n        }\n      }\n    };\n    updateGridSize(); // Initial calculation\n\n    const resizeObserver = new ResizeObserver(updateGridSize);\n    if (gridContainerRef.current) {\n      resizeObserver.observe(gridContainerRef.current);\n    }\n    return () => resizeObserver.disconnect();\n  }, [zoomLevel, showGridLines, setGrid]);\n  const handleMouseDown = (rowIndex, cellIndex) => {\n    setIsPainting(true);\n    paintCell(rowIndex, cellIndex);\n  };\n  const handleMouseEnter = (rowIndex, cellIndex) => {\n    if (isPainting) {\n      paintCell(rowIndex, cellIndex);\n    }\n  };\n  const getCellStyle = (rowIndex, cellIndex) => {\n    var _grid$rowIndex;\n    const paletteIndex = (_grid$rowIndex = grid[rowIndex]) === null || _grid$rowIndex === void 0 ? void 0 : _grid$rowIndex[cellIndex];\n    const baseStyle = {\n      width: `${ZOOM_LEVELS[zoomLevel]}px`,\n      height: `${ZOOM_LEVELS[zoomLevel]}px`,\n      boxSizing: 'border-box'\n    };\n    if (paletteIndex === null || paletteIndex === undefined || !palette[paletteIndex]) {\n      return {\n        ...baseStyle,\n        backgroundColor: '#ddd'\n      };\n    }\n    const tileStyle = palette[paletteIndex];\n    return {\n      ...baseStyle,\n      ...tileStyle\n    };\n  };\n\n  // Generate grid cells array for rendering\n  const generateGridCells = () => {\n    const cells = [];\n    for (let row = 0; row < gridDimensions.rows; row++) {\n      for (let col = 0; col < gridDimensions.cols; col++) {\n        cells.push(/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-cell\",\n          onMouseDown: () => handleMouseDown(row, col),\n          onMouseEnter: () => handleMouseEnter(row, col),\n          style: getCellStyle(row, col)\n        }, `${row}-${col}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this));\n      }\n    }\n    return cells;\n  };\n  const gridStyle = {\n    display: 'grid',\n    gridTemplateColumns: `repeat(${gridDimensions.cols}, ${ZOOM_LEVELS[zoomLevel]}px)`,\n    gridTemplateRows: `repeat(${gridDimensions.rows}, ${ZOOM_LEVELS[zoomLevel]}px)`,\n    gap: showGridLines ? '1px' : '0',\n    justifyContent: 'center',\n    alignContent: 'center',\n    width: '100%',\n    height: '100%',\n    backgroundColor: showGridLines ? '#555' : 'transparent',\n    border: showGridLines ? '1px solid #555' : 'none',\n    overflow: 'hidden'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sandbox\",\n    onMouseUp: () => setIsPainting(false),\n    onMouseLeave: () => setIsPainting(false),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sandbox-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearGrid,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: randomizeGrid,\n        children: \"Randomize\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowGridLines(!showGridLines),\n        className: showGridLines ? 'active' : '',\n        children: \"Grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"zoom-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setZoomLevel(0),\n          className: zoomLevel === 0 ? 'active' : '',\n          children: \"1x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setZoomLevel(1),\n          className: zoomLevel === 1 ? 'active' : '',\n          children: \"2x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setZoomLevel(2),\n          className: zoomLevel === 2 ? 'active' : '',\n          children: \"3x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: `${gridDimensions.rows} Ã— ${gridDimensions.cols}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: gridContainerRef,\n      className: `sandbox-grid ${!showGridLines ? 'no-grid' : ''}`,\n      style: gridStyle,\n      children: generateGridCells()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s(Sandbox, \"NXaZnJEyqCj+uxmmKTdH8nuATB0=\");\n_c = Sandbox;\nexport default Sandbox;\nvar _c;\n$RefreshReg$(_c, \"Sandbox\");","map":{"version":3,"names":["React","useState","useRef","useLayoutEffect","jsxDEV","_jsxDEV","MIN_GRID_SIZE","MAX_GRID_SIZE","ZOOM_LEVELS","Sandbox","palette","grid","paintCell","clearGrid","randomizeGrid","setGrid","_s","_grid$","isPainting","setIsPainting","showGridLines","setShowGridLines","zoomLevel","setZoomLevel","gridDimensions","setGridDimensions","rows","length","cols","gridContainerRef","updateGridSize","current","width","height","getBoundingClientRect","cellSize","newCols","Math","max","min","floor","newRows","newGrid","Array","from","_","r","c","_grid$2","resizeObserver","ResizeObserver","observe","disconnect","handleMouseDown","rowIndex","cellIndex","handleMouseEnter","getCellStyle","_grid$rowIndex","paletteIndex","baseStyle","boxSizing","undefined","backgroundColor","tileStyle","generateGridCells","cells","row","col","push","className","onMouseDown","onMouseEnter","style","fileName","_jsxFileName","lineNumber","columnNumber","gridStyle","display","gridTemplateColumns","gridTemplateRows","gap","justifyContent","alignContent","border","overflow","onMouseUp","onMouseLeave","children","onClick","ref","_c","$RefreshReg$"],"sources":["/home/user/TileMonster/css-tile-forge/src/components/Sandbox/Sandbox.tsx"],"sourcesContent":["import React, { useState, useRef, useLayoutEffect } from 'react';\nimport { TileStyle } from '../../data/types';\n\ninterface SandboxProps {\n  palette: TileStyle[];\n  grid: (number | null)[][];\n  paintCell: (row: number, col: number) => void;\n  clearGrid: () => void;\n  randomizeGrid: () => void;\n  setGrid: (grid: (number | null)[][]) => void;\n}\n\nconst MIN_GRID_SIZE = 16;\nconst MAX_GRID_SIZE = 64;\nconst ZOOM_LEVELS = [12, 18, 24]; // Cell sizes in pixels\n\nconst Sandbox: React.FC<SandboxProps> = ({\n  palette,\n  grid,\n  paintCell,\n  clearGrid,\n  randomizeGrid,\n  setGrid,\n}) => {\n  const [isPainting, setIsPainting] = useState(false);\n  const [showGridLines, setShowGridLines] = useState(true);\n  const [zoomLevel, setZoomLevel] = useState(1); // Index for ZOOM_LEVELS\n  const [gridDimensions, setGridDimensions] = useState({ rows: grid.length || 16, cols: grid[0]?.length || 16 });\n  const gridContainerRef = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    const updateGridSize = () => {\n      if (gridContainerRef.current) {\n        const { width, height } = gridContainerRef.current.getBoundingClientRect();\n        const cellSize = ZOOM_LEVELS[zoomLevel] + (showGridLines ? 1 : 0);\n        \n        const newCols = Math.max(MIN_GRID_SIZE, Math.min(MAX_GRID_SIZE, Math.floor(width / cellSize)));\n        const newRows = Math.max(MIN_GRID_SIZE, Math.min(MAX_GRID_SIZE, Math.floor(height / cellSize)));\n\n        if (newRows !== gridDimensions.rows || newCols !== gridDimensions.cols) {\n          setGridDimensions({ rows: newRows, cols: newCols });\n\n          // Resize grid data, preserving existing painted cells\n          const newGrid = Array.from({ length: newRows }, (_, r) =>\n            Array.from({ length: newCols }, (_, c) => {\n              return r < grid.length && c < (grid[0]?.length || 0) && grid[r] ? grid[r][c] : null;\n            })\n          );\n          setGrid(newGrid);\n        }\n      }\n    };\n\n    updateGridSize(); // Initial calculation\n\n    const resizeObserver = new ResizeObserver(updateGridSize);\n    if (gridContainerRef.current) {\n      resizeObserver.observe(gridContainerRef.current);\n    }\n\n    return () => resizeObserver.disconnect();\n  }, [zoomLevel, showGridLines, setGrid]);\n\n  const handleMouseDown = (rowIndex: number, cellIndex: number) => {\n    setIsPainting(true);\n    paintCell(rowIndex, cellIndex);\n  };\n\n  const handleMouseEnter = (rowIndex: number, cellIndex: number) => {\n    if (isPainting) {\n      paintCell(rowIndex, cellIndex);\n    }\n  };\n\n  const getCellStyle = (rowIndex: number, cellIndex: number): React.CSSProperties => {\n    const paletteIndex = grid[rowIndex]?.[cellIndex];\n    const baseStyle: React.CSSProperties = {\n        width: `${ZOOM_LEVELS[zoomLevel]}px`,\n        height: `${ZOOM_LEVELS[zoomLevel]}px`,\n        boxSizing: 'border-box',\n    };\n\n    if (paletteIndex === null || paletteIndex === undefined || !palette[paletteIndex]) {\n      return { ...baseStyle, backgroundColor: '#ddd' };\n    }\n    \n    const tileStyle = palette[paletteIndex];\n    return { ...baseStyle, ...tileStyle };\n  };\n\n  // Generate grid cells array for rendering\n  const generateGridCells = () => {\n    const cells = [];\n    for (let row = 0; row < gridDimensions.rows; row++) {\n      for (let col = 0; col < gridDimensions.cols; col++) {\n        cells.push(\n          <div\n            key={`${row}-${col}`}\n            className=\"grid-cell\"\n            onMouseDown={() => handleMouseDown(row, col)}\n            onMouseEnter={() => handleMouseEnter(row, col)}\n            style={getCellStyle(row, col)}\n          />\n        );\n      }\n    }\n    return cells;\n  };\n\n  const gridStyle: React.CSSProperties = {\n    display: 'grid',\n    gridTemplateColumns: `repeat(${gridDimensions.cols}, ${ZOOM_LEVELS[zoomLevel]}px)`,\n    gridTemplateRows: `repeat(${gridDimensions.rows}, ${ZOOM_LEVELS[zoomLevel]}px)`,\n    gap: showGridLines ? '1px' : '0',\n    justifyContent: 'center',\n    alignContent: 'center',\n    width: '100%',\n    height: '100%',\n    backgroundColor: showGridLines ? '#555' : 'transparent',\n    border: showGridLines ? '1px solid #555' : 'none',\n    overflow: 'hidden',\n  };\n\n  return (\n    <div className=\"sandbox\" onMouseUp={() => setIsPainting(false)} onMouseLeave={() => setIsPainting(false)}>\n        <div className=\"sandbox-controls\">\n            <button onClick={clearGrid}>Clear</button>\n            <button onClick={randomizeGrid}>Randomize</button>\n            <button onClick={() => setShowGridLines(!showGridLines)} className={showGridLines ? 'active' : ''}>\n                Grid\n            </button>\n            <div className=\"zoom-controls\">\n                <button onClick={() => setZoomLevel(0)} className={zoomLevel === 0 ? 'active' : ''}>1x</button>\n                <button onClick={() => setZoomLevel(1)} className={zoomLevel === 1 ? 'active' : ''}>2x</button>\n                <button onClick={() => setZoomLevel(2)} className={zoomLevel === 2 ? 'active' : ''}>3x</button>\n            </div>\n            <span>{`${gridDimensions.rows} Ã— ${gridDimensions.cols}`}</span>\n        </div>\n      <div \n        ref={gridContainerRef} \n        className={`sandbox-grid ${!showGridLines ? 'no-grid' : ''}`}\n        style={gridStyle}\n      >\n        {generateGridCells()}\n      </div>\n    </div>\n  );\n};\n\nexport default Sandbox;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}