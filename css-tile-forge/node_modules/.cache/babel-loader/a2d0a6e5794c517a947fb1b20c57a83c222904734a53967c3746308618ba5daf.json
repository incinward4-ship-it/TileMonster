{"ast":null,"code":"var _jsxFileName = \"/home/user/TileMonster/css-tile-forge/src/components/AttributePanel/AttributePanel.tsx\";\nimport React from 'react';\nimport AttributeBox from '../AttributeBox/AttributeBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet nextId = 0;\nconst getNextId = () => nextId++;\nconst AttributePanel = ({\n  attributes,\n  setAttributes\n}) => {\n  const addAttribute = attributeType => {\n    if (!attributeType) return;\n    let newAttribute;\n    switch (attributeType) {\n      case 'background-color':\n        newAttribute = {\n          id: getNextId(),\n          type: 'background-color',\n          value: '#ffffff'\n        };\n        break;\n      case 'linear-gradient':\n        newAttribute = {\n          id: getNextId(),\n          type: 'linear-gradient',\n          value: {\n            color1: '#ffffff',\n            color2: '#000000',\n            angle: 90\n          }\n        };\n        break;\n      case 'radial-gradient':\n        newAttribute = {\n          id: getNextId(),\n          type: 'radial-gradient',\n          value: {\n            color1: '#ffffff',\n            color2: '#000000'\n          }\n        };\n        break;\n      default:\n        return;\n    }\n    if (attributeType === 'background-color' && attributes.some(attr => attr.type === 'background-color')) {\n      alert('Only one background-color attribute is allowed.');\n      return;\n    }\n    setAttributes([...attributes, newAttribute]);\n  };\n  const removeAttribute = id => {\n    setAttributes(attributes.filter(attr => attr.id !== id));\n  };\n  const updateAttribute = (id, newValue) => {\n    setAttributes(attributes.map(attr => attr.id === id ? {\n      ...attr,\n      value: newValue\n    } : attr));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"attribute-panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"attribute-controls\",\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => {\n          addAttribute(e.target.value);\n          e.target.value = \"\";\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Add Attribute\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"background-color\",\n          children: \"Background Color\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"linear-gradient\",\n          children: \"Linear Gradient\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"radial-gradient\",\n          children: \"Radial Gradient\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"attribute-boxes\",\n      children: attributes.map(attr => /*#__PURE__*/_jsxDEV(AttributeBox, {\n        attribute: attr,\n        onRemove: () => removeAttribute(attr.id),\n        onUpdate: newValue => updateAttribute(attr.id, newValue)\n      }, attr.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_c = AttributePanel;\nexport default AttributePanel;\nvar _c;\n$RefreshReg$(_c, \"AttributePanel\");","map":{"version":3,"names":["React","AttributeBox","jsxDEV","_jsxDEV","nextId","getNextId","AttributePanel","attributes","setAttributes","addAttribute","attributeType","newAttribute","id","type","value","color1","color2","angle","some","attr","alert","removeAttribute","filter","updateAttribute","newValue","map","className","children","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","attribute","onRemove","onUpdate","_c","$RefreshReg$"],"sources":["/home/user/TileMonster/css-tile-forge/src/components/AttributePanel/AttributePanel.tsx"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport AttributeBox from '../AttributeBox/AttributeBox';\n\nexport interface Attribute {\n  id: number;\n  type: string;\n  value: any;\n}\n\ninterface AttributePanelProps {\n  attributes: Attribute[];\n  setAttributes: React.Dispatch<React.SetStateAction<Attribute[]>>;\n}\n\nlet nextId = 0;\nconst getNextId = () => nextId++;\n\nconst AttributePanel: React.FC<AttributePanelProps> = ({ attributes, setAttributes }) => {\n\n  const addAttribute = (attributeType: string) => {\n    if (!attributeType) return;\n\n    let newAttribute;\n    switch (attributeType) {\n      case 'background-color':\n        newAttribute = { id: getNextId(), type: 'background-color', value: '#ffffff' };\n        break;\n      case 'linear-gradient':\n        newAttribute = { id: getNextId(), type: 'linear-gradient', value: { color1: '#ffffff', color2: '#000000', angle: 90 } };\n        break;\n      case 'radial-gradient':\n        newAttribute = { id: getNextId(), type: 'radial-gradient', value: { color1: '#ffffff', color2: '#000000' } };\n        break;\n      default:\n        return;\n    }\n\n    if (attributeType === 'background-color' && attributes.some(attr => attr.type === 'background-color')) {\n        alert('Only one background-color attribute is allowed.');\n        return;\n    }\n\n    setAttributes([...attributes, newAttribute]);\n  };\n\n  const removeAttribute = (id: number) => {\n    setAttributes(attributes.filter(attr => attr.id !== id));\n  };\n\n  const updateAttribute = (id: number, newValue: any) => {\n    setAttributes(attributes.map(attr => (attr.id === id ? { ...attr, value: newValue } : attr)));\n  };\n\n  return (\n    <div className=\"attribute-panel\">\n      <div className=\"attribute-controls\">\n        <select onChange={(e) => {\n          addAttribute(e.target.value);\n          e.target.value = \"\";\n        }}>\n          <option value=\"\">Add Attribute</option>\n          <option value=\"background-color\">Background Color</option>\n          <option value=\"linear-gradient\">Linear Gradient</option>\n          <option value=\"radial-gradient\">Radial Gradient</option>\n        </select>\n      </div>\n      <div className=\"attribute-boxes\">\n        {attributes.map(attr => (\n          <AttributeBox\n            key={attr.id}\n            attribute={attr}\n            onRemove={() => removeAttribute(attr.id)}\n            onUpdate={(newValue) => updateAttribute(attr.id, newValue)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default AttributePanel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}