{"ast":null,"code":"var _jsxFileName = \"/home/user/TileMonster/css-tile-forge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport TextureCreator from './components/TextureCreator/TextureCreator';\nimport Sandbox from './components/Sandbox/Sandbox';\nimport Export from './components/Export/Export';\nimport StylePalette from './components/StylePalette/StylePalette';\nimport './App.css';\n\n// Each cell in 32x32 grid stores either null or index into palette\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create empty 32x32 grid with null cells\nconst createEmptyGrid = () => Array.from({\n  length: 32\n}, () => Array(32).fill(null));\nfunction App() {\n  _s();\n  // Palette of saved tile styles\n  const [palette, setPalette] = useState([]);\n\n  // 32x32 sandbox grid storing indexes into palette or null\n  const [grid, setGrid] = useState(createEmptyGrid());\n\n  // Index of selected palette style for painting\n  const [selectedStyleIndex, setSelectedStyleIndex] = useState(null);\n\n  // Add current style to palette and auto-select it\n  const saveStyleToPalette = style => {\n    setPalette(prev => {\n      const newPalette = [...prev, style];\n      setSelectedStyleIndex(newPalette.length - 1);\n      return newPalette;\n    });\n  };\n\n  // Paint grid cell with selected style index\n  const paintCell = (row, col) => {\n    if (selectedStyleIndex === null) return;\n    const newGrid = grid.map(r => [...r]);\n    newGrid[row][col] = selectedStyleIndex;\n    setGrid(newGrid);\n  };\n  const clearGrid = () => {\n    setGrid(createEmptyGrid());\n  };\n  const randomizeGrid = () => {\n    if (palette.length === 0) {\n      alert(\"Please save at least one style to the palette before randomizing.\");\n      return;\n    }\n    const newGrid = grid.map(row => row.map(() => {\n      // Allow for some empty cells\n      if (Math.random() > 0.7) {\n        return null;\n      }\n      return Math.floor(Math.random() * palette.length);\n    }));\n    setGrid(newGrid);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CSS-Tile-Forge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"App-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-column\",\n        children: [/*#__PURE__*/_jsxDEV(TextureCreator, {\n          saveToPalette: saveStyleToPalette\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StylePalette, {\n          palette: palette,\n          selectedStyleIndex: selectedStyleIndex,\n          setSelectedStyleIndex: setSelectedStyleIndex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-column\",\n        children: /*#__PURE__*/_jsxDEV(Sandbox, {\n          palette: palette,\n          grid: grid,\n          paintCell: paintCell,\n          clearGrid: clearGrid,\n          randomizeGrid: randomizeGrid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-column\",\n        children: /*#__PURE__*/_jsxDEV(Export, {\n          palette: palette,\n          grid: grid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1HGFmcVUVUOKzN8Iq9cOkuFZ12E=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","TextureCreator","Sandbox","Export","StylePalette","jsxDEV","_jsxDEV","createEmptyGrid","Array","from","length","fill","App","_s","palette","setPalette","grid","setGrid","selectedStyleIndex","setSelectedStyleIndex","saveStyleToPalette","style","prev","newPalette","paintCell","row","col","newGrid","map","r","clearGrid","randomizeGrid","alert","Math","random","floor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","saveToPalette","_c","$RefreshReg$"],"sources":["/home/user/TileMonster/css-tile-forge/src/App.tsx"],"sourcesContent":["\nimport React, { useState } from 'react';\nimport TextureCreator from './components/TextureCreator/TextureCreator';\nimport Sandbox from './components/Sandbox/Sandbox';\nimport Export from './components/Export/Export';\nimport StylePalette from './components/StylePalette/StylePalette';\nimport { TileStyle } from './data/types';\nimport './App.css';\n\n\n// Each cell in 32x32 grid stores either null or index into palette\ntype GridCell = number | null;\n\n\n// Create empty 32x32 grid with null cells\nconst createEmptyGrid = (): GridCell[][] =>\n  Array.from({ length: 32 }, () => Array(32).fill(null));\n\nfunction App() {\n  // Palette of saved tile styles\n  const [palette, setPalette] = useState<TileStyle[]>([]);\n\n  // 32x32 sandbox grid storing indexes into palette or null\n  const [grid, setGrid] = useState<GridCell[][]>(createEmptyGrid());\n\n  // Index of selected palette style for painting\n  const [selectedStyleIndex, setSelectedStyleIndex] = useState<number | null>(null);\n\n  // Add current style to palette and auto-select it\n  const saveStyleToPalette = (style: TileStyle) => {\n    setPalette(prev => {\n      const newPalette = [...prev, style];\n      setSelectedStyleIndex(newPalette.length - 1);\n      return newPalette;\n    });\n  };\n\n  // Paint grid cell with selected style index\n  const paintCell = (row: number, col: number) => {\n    if (selectedStyleIndex === null) return;\n    const newGrid = grid.map(r => [...r]);\n    newGrid[row][col] = selectedStyleIndex;\n    setGrid(newGrid);\n  };\n\n  const clearGrid = () => {\n    setGrid(createEmptyGrid());\n  };\n\n  const randomizeGrid = () => {\n    if (palette.length === 0) {\n      alert(\"Please save at least one style to the palette before randomizing.\");\n      return;\n    }\n    const newGrid = grid.map(row => \n      row.map(() => {\n        // Allow for some empty cells\n        if (Math.random() > 0.7) {\n            return null;\n        }\n        return Math.floor(Math.random() * palette.length)\n      })\n    );\n    setGrid(newGrid);\n  };\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>CSS-Tile-Forge</h1>\n      </header>\n      <main className=\"App-main\">\n        <div className=\"left-column\">\n            <TextureCreator\n              saveToPalette={saveStyleToPalette}\n            />\n            <StylePalette\n              palette={palette}\n              selectedStyleIndex={selectedStyleIndex}\n              setSelectedStyleIndex={setSelectedStyleIndex}\n            />\n        </div>\n        <div className=\"center-column\">\n            <Sandbox\n              palette={palette}\n              grid={grid}\n              paintCell={paintCell}\n              clearGrid={clearGrid}\n              randomizeGrid={randomizeGrid}\n            />\n        </div>\n        <div className=\"right-column\">\n            <Export\n              palette={palette}\n              grid={grid}\n            />\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}