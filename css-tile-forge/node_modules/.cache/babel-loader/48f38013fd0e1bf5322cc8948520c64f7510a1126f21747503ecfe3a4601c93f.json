{"ast":null,"code":"var _jsxFileName = \"/home/user/TileMonster/css-tile-forge/src/components/TextureCreator/TextureCreator.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport AttributePanel from '../AttributePanel/AttributePanel';\nimport Preview from '../Preview/Preview';\nimport { CSS_ATTRIBUTES } from '../../data/css-attributes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// --- Helper functions for randomization ---\nconst getRandomColor = () => `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0')}`;\nconst getRandomValue = (min, max, step) => {\n  const steps = (max - min) / step;\n  return min + Math.floor(Math.random() * (steps + 1)) * step;\n};\nconst generateRandomValueFor = definition => {\n  var _definition$subAttrib;\n  switch (definition.controlType) {\n    case 'color':\n      return getRandomColor();\n    case 'slider':\n      return getRandomValue(definition.min, definition.max, definition.step);\n    case 'select':\n      const randomIndex = Math.floor(Math.random() * definition.options.length);\n      return definition.options[randomIndex].value;\n    case 'checkbox':\n      return Math.random() > 0.5;\n    case 'multi':\n      const multiValue = {};\n      (_definition$subAttrib = definition.subAttributes) === null || _definition$subAttrib === void 0 ? void 0 : _definition$subAttrib.forEach(subDef => {\n        // Recurse to get random values for sub-attributes\n        multiValue[subDef.id] = generateRandomValueFor(subDef);\n      });\n      return multiValue;\n    default:\n      return definition.defaultValue;\n  }\n};\n// --- End of Randomization Helpers ---\n\nconst TextureCreator = ({\n  saveToPalette\n}) => {\n  _s();\n  const [activeAttributes, setActiveAttributes] = useState([]);\n  const [tileStyles, setTileStyles] = useState({});\n  useEffect(() => {\n    const newStyles = {};\n    const gradients = [];\n    activeAttributes.forEach(({\n      definition,\n      value\n    }) => {\n      switch (definition.id) {\n        // Simple 1-to-1 mappings\n        case 'backgroundColor':\n          newStyles.backgroundColor = value;\n          break;\n        case 'opacity':\n          newStyles.opacity = value;\n          break;\n        case 'borderRadius':\n          newStyles.borderRadius = `${value}px`;\n          break;\n\n        // Complex multi-value mappings\n        case 'border':\n          newStyles.border = `${value.width}px ${value.style} ${value.color}`;\n          break;\n        case 'boxShadow':\n          newStyles.boxShadow = `${value.inset ? 'inset ' : ''}${value.offsetX}px ${value.offsetY}px ${value.blurRadius}px ${value.spreadRadius}px ${value.color}`;\n          break;\n        case 'transform':\n          newStyles.transform = `rotate(${value.rotate}deg) scale(${value.scaleX}, ${value.scaleY})`;\n          break;\n\n        // Gradients (collected and joined later)\n        case 'linear-gradient':\n          gradients.push(`linear-gradient(${value.angle}deg, ${value.color1}, ${value.color2})`);\n          break;\n        case 'radial-gradient':\n          gradients.push(`radial-gradient(circle, ${value.color1}, ${value.color2})`);\n          break;\n      }\n    });\n\n    // Combine gradients if they exist\n    if (gradients.length > 0) {\n      newStyles.backgroundImage = gradients.join(', ');\n    }\n    setTileStyles(newStyles);\n  }, [activeAttributes]);\n  const handleRandomize = () => {\n    const newAttributes = [];\n    const uniqueIds = new Set();\n\n    // Get a random number of attributes to add\n    const numAttributes = Math.floor(Math.random() * 4) + 2; // 2 to 5 attributes\n\n    for (let i = 0; i < numAttributes; i++) {\n      const available = CSS_ATTRIBUTES.filter(def => !uniqueIds.has(def.id));\n      if (available.length === 0) break;\n      const randomDef = available[Math.floor(Math.random() * available.length)];\n\n      // Ensure certain attributes are only added once\n      if (randomDef.id === 'backgroundColor' || randomDef.id === 'opacity') {\n        uniqueIds.add(randomDef.id);\n      }\n      newAttributes.push({\n        id: `rand-${i}`,\n        definition: randomDef,\n        value: generateRandomValueFor(randomDef)\n      });\n    }\n    setActiveAttributes(newAttributes);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"texture-creator\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Texture Creator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Preview, {\n      tileStyles: tileStyles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRandomize,\n        children: \"Randomize\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => saveToPalette(tileStyles),\n        style: {\n          marginLeft: '10px'\n        },\n        children: \"Save to Palette\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AttributePanel, {\n      attributes: activeAttributes,\n      setAttributes: setActiveAttributes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(TextureCreator, \"H2zvvnPIgst//xlB1ri0wDWAhzw=\");\n_c = TextureCreator;\nexport default TextureCreator;\nvar _c;\n$RefreshReg$(_c, \"TextureCreator\");","map":{"version":3,"names":["React","useState","useEffect","AttributePanel","Preview","CSS_ATTRIBUTES","jsxDEV","_jsxDEV","getRandomColor","Math","floor","random","toString","padStart","getRandomValue","min","max","step","steps","generateRandomValueFor","definition","_definition$subAttrib","controlType","randomIndex","options","length","value","multiValue","subAttributes","forEach","subDef","id","defaultValue","TextureCreator","saveToPalette","_s","activeAttributes","setActiveAttributes","tileStyles","setTileStyles","newStyles","gradients","backgroundColor","opacity","borderRadius","border","width","style","color","boxShadow","inset","offsetX","offsetY","blurRadius","spreadRadius","transform","rotate","scaleX","scaleY","push","angle","color1","color2","backgroundImage","join","handleRandomize","newAttributes","uniqueIds","Set","numAttributes","i","available","filter","def","has","randomDef","add","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","marginLeft","attributes","setAttributes","_c","$RefreshReg$"],"sources":["/home/user/TileMonster/css-tile-forge/src/components/TextureCreator/TextureCreator.tsx"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport AttributePanel, { ActiveAttribute } from '../AttributePanel/AttributePanel';\nimport Preview from '../Preview/Preview';\nimport { CSS_ATTRIBUTES, CssAttribute } from '../../data/css-attributes';\n\ninterface TextureCreatorProps {\n  saveToPalette: (style: React.CSSProperties) => void;\n}\n\n// --- Helper functions for randomization ---\nconst getRandomColor = () => `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0')}`;\n\nconst getRandomValue = (min: number, max: number, step: number) => {\n  const steps = (max - min) / step;\n  return min + Math.floor(Math.random() * (steps + 1)) * step;\n};\n\nconst generateRandomValueFor = (definition: CssAttribute): any => {\n  switch (definition.controlType) {\n    case 'color':\n      return getRandomColor();\n    case 'slider':\n      return getRandomValue(definition.min!, definition.max!, definition.step!);\n    case 'select':\n      const randomIndex = Math.floor(Math.random() * definition.options!.length);\n      return definition.options![randomIndex].value;\n    case 'checkbox':\n        return Math.random() > 0.5;\n    case 'multi':\n      const multiValue: { [key: string]: any } = {};\n      definition.subAttributes?.forEach(subDef => {\n        // Recurse to get random values for sub-attributes\n        multiValue[subDef.id] = generateRandomValueFor(subDef as any as CssAttribute);\n      });\n      return multiValue;\n    default:\n      return definition.defaultValue;\n  }\n};\n// --- End of Randomization Helpers ---\n\n\nconst TextureCreator: React.FC<TextureCreatorProps> = ({ saveToPalette }) => {\n  const [activeAttributes, setActiveAttributes] = useState<ActiveAttribute[]>([]);\n  const [tileStyles, setTileStyles] = useState<React.CSSProperties>({});\n\n  useEffect(() => {\n    const newStyles: React.CSSProperties = {};\n    const gradients: string[] = [];\n\n    activeAttributes.forEach(({ definition, value }) => {\n      switch (definition.id) {\n        // Simple 1-to-1 mappings\n        case 'backgroundColor':\n          newStyles.backgroundColor = value;\n          break;\n        case 'opacity':\n          newStyles.opacity = value;\n          break;\n        case 'borderRadius':\n          newStyles.borderRadius = `${value}px`;\n          break;\n\n        // Complex multi-value mappings\n        case 'border':\n          newStyles.border = `${value.width}px ${value.style} ${value.color}`;\n          break;\n        case 'boxShadow':\n          newStyles.boxShadow = `${value.inset ? 'inset ' : ''}${value.offsetX}px ${value.offsetY}px ${value.blurRadius}px ${value.spreadRadius}px ${value.color}`;\n          break;\n        case 'transform':\n           newStyles.transform = `rotate(${value.rotate}deg) scale(${value.scaleX}, ${value.scaleY})`;\n           break;\n\n        // Gradients (collected and joined later)\n        case 'linear-gradient':\n          gradients.push(`linear-gradient(${value.angle}deg, ${value.color1}, ${value.color2})`);\n          break;\n        case 'radial-gradient':\n          gradients.push(`radial-gradient(circle, ${value.color1}, ${value.color2})`);\n          break;\n      }\n    });\n\n    // Combine gradients if they exist\n    if (gradients.length > 0) {\n      newStyles.backgroundImage = gradients.join(', ');\n    }\n\n    setTileStyles(newStyles);\n  }, [activeAttributes]);\n\n  const handleRandomize = () => {\n    const newAttributes: ActiveAttribute[] = [];\n    const uniqueIds = new Set<string>();\n\n    // Get a random number of attributes to add\n    const numAttributes = Math.floor(Math.random() * 4) + 2; // 2 to 5 attributes\n\n    for (let i = 0; i < numAttributes; i++) {\n      const available = CSS_ATTRIBUTES.filter(def => !uniqueIds.has(def.id));\n      if(available.length === 0) break;\n\n      const randomDef = available[Math.floor(Math.random() * available.length)];\n      \n      // Ensure certain attributes are only added once\n      if(randomDef.id === 'backgroundColor' || randomDef.id === 'opacity') {\n        uniqueIds.add(randomDef.id);\n      }\n      \n      newAttributes.push({\n        id: `rand-${i}`,\n        definition: randomDef,\n        value: generateRandomValueFor(randomDef),\n      });\n    }\n\n    setActiveAttributes(newAttributes);\n  };\n\n  return (\n    <div className=\"texture-creator\">\n      <h2>Texture Creator</h2>\n      <Preview tileStyles={tileStyles} />\n      <div className=\"controls\">\n        <button onClick={handleRandomize}>Randomize</button>\n        <button onClick={() => saveToPalette(tileStyles)} style={{ marginLeft: '10px' }}>\n          Save to Palette\n        </button>\n      </div>\n      <AttributePanel attributes={activeAttributes} setAttributes={setActiveAttributes} />\n    </div>\n  );\n};\n\nexport default TextureCreator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}