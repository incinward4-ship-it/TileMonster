{"ast":null,"code":"var _jsxFileName = \"/home/user/TileMonster/css-tile-forge/src/components/TextureCreator/TextureCreator.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport AttributePanel from '../AttributePanel/AttributePanel';\nimport Preview from '../Preview/Preview';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextureCreator = ({\n  saveToPalette\n}) => {\n  _s();\n  const [attributes, setAttributes] = useState([]);\n  const [tileStyles, setTileStyles] = useState({});\n  useEffect(() => {\n    const newStyles = {};\n    attributes.forEach(attr => {\n      if (attr.type === 'background-color') {\n        newStyles.backgroundColor = attr.value;\n      } else if (attr.type === 'radial-gradient') {\n        newStyles.backgroundImage = `radial-gradient(${attr.value.color1}, ${attr.value.color2})`;\n      }\n    });\n    setTileStyles(newStyles);\n  }, [attributes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"texture-creator\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Texture Creator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Preview, {\n      tileStyles: tileStyles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => saveToPalette(tileStyles),\n        children: \"Save to Palette\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AttributePanel, {\n      attributes: attributes,\n      setAttributes: setAttributes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(TextureCreator, \"tbtMqEOv0OktCIY3I0yZnU8/Gj8=\");\n_c = TextureCreator;\nexport default TextureCreator;\nvar _c;\n$RefreshReg$(_c, \"TextureCreator\");","map":{"version":3,"names":["React","useState","useEffect","AttributePanel","Preview","jsxDEV","_jsxDEV","TextureCreator","saveToPalette","_s","attributes","setAttributes","tileStyles","setTileStyles","newStyles","forEach","attr","type","backgroundColor","value","backgroundImage","color1","color2","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/user/TileMonster/css-tile-forge/src/components/TextureCreator/TextureCreator.tsx"],"sourcesContent":["\nimport React, { useState, useRef, useEffect } from 'react';\nimport AttributePanel, { Attribute } from '../AttributePanel/AttributePanel';\nimport Preview from '../Preview/Preview';\n\ninterface TextureCreatorProps {\n  saveToPalette: (style: React.CSSProperties) => void;\n}\n\nconst TextureCreator: React.FC<TextureCreatorProps> = ({ saveToPalette }) => {\n  const [attributes, setAttributes] = useState<Attribute[]>([]);\n  const [tileStyles, setTileStyles] = useState<React.CSSProperties>({});\n\n  useEffect(() => {\n    const newStyles: React.CSSProperties = {};\n    attributes.forEach(attr => {\n      if (attr.type === 'background-color') {\n        newStyles.backgroundColor = attr.value;\n      } else if (attr.type === 'radial-gradient') {\n        newStyles.backgroundImage = `radial-gradient(${attr.value.color1}, ${attr.value.color2})`;\n      }\n    });\n    setTileStyles(newStyles);\n  }, [attributes]);\n\n  return (\n    <div className=\"texture-creator\">\n      <h2>Texture Creator</h2>\n      <Preview tileStyles={tileStyles} />\n      <div className=\"controls\">\n        <button onClick={() => saveToPalette(tileStyles)}>Save to Palette</button>\n      </div>\n      <AttributePanel attributes={attributes} setAttributes={setAttributes} />\n    </div>\n  );\n};\n\nexport default TextureCreator;\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAUC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,cAAc,MAAqB,kCAAkC;AAC5E,OAAOC,OAAO,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAMzC,MAAMC,cAA6C,GAAGA,CAAC;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAC3E,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAc,EAAE,CAAC;EAC7D,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAsB,CAAC,CAAC,CAAC;EAErEC,SAAS,CAAC,MAAM;IACd,MAAMY,SAA8B,GAAG,CAAC,CAAC;IACzCJ,UAAU,CAACK,OAAO,CAACC,IAAI,IAAI;MACzB,IAAIA,IAAI,CAACC,IAAI,KAAK,kBAAkB,EAAE;QACpCH,SAAS,CAACI,eAAe,GAAGF,IAAI,CAACG,KAAK;MACxC,CAAC,MAAM,IAAIH,IAAI,CAACC,IAAI,KAAK,iBAAiB,EAAE;QAC1CH,SAAS,CAACM,eAAe,GAAG,mBAAmBJ,IAAI,CAACG,KAAK,CAACE,MAAM,KAAKL,IAAI,CAACG,KAAK,CAACG,MAAM,GAAG;MAC3F;IACF,CAAC,CAAC;IACFT,aAAa,CAACC,SAAS,CAAC;EAC1B,CAAC,EAAE,CAACJ,UAAU,CAAC,CAAC;EAEhB,oBACEJ,OAAA;IAAKiB,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BlB,OAAA;MAAAkB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBtB,OAAA,CAACF,OAAO;MAACQ,UAAU,EAAEA;IAAW;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnCtB,OAAA;MAAKiB,SAAS,EAAC,UAAU;MAAAC,QAAA,eACvBlB,OAAA;QAAQuB,OAAO,EAAEA,CAAA,KAAMrB,aAAa,CAACI,UAAU,CAAE;QAAAY,QAAA,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvE,CAAC,eACNtB,OAAA,CAACH,cAAc;MAACO,UAAU,EAAEA,UAAW;MAACC,aAAa,EAAEA;IAAc;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrE,CAAC;AAEV,CAAC;AAACnB,EAAA,CA1BIF,cAA6C;AAAAuB,EAAA,GAA7CvB,cAA6C;AA4BnD,eAAeA,cAAc;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}