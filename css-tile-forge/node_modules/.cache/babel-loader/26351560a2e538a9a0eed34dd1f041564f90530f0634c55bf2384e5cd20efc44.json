{"ast":null,"code":"var _jsxFileName = \"/home/user/TileMonster/css-tile-forge/src/components/TextureCreator/TextureCreator.tsx\";\nimport React from 'react';\nimport AttributePanel from '../AttributePanel/AttributePanel';\nimport { CSS_ATTRIBUTES } from '../../data/css-attributes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextureCreator = ({\n  saveToPalette,\n  activeAttributes,\n  setActiveAttributes,\n  tileStyles\n}) => {\n  const handleRandomize = () => {\n    const presentIds = activeAttributes.map(attr => attr.definition.id);\n    const availableAttrs = CSS_ATTRIBUTES.filter(attr => !presentIds.includes(attr.id) || ['borderTop', 'borderRight', 'borderBottom', 'borderLeft'].includes(attr.id));\n    if (availableAttrs.length === 0) return;\n    const randomAttr = availableAttrs[Math.floor(Math.random() * availableAttrs.length)];\n    const newAttr = {\n      id: `rand-${Date.now()}`,\n      definition: randomAttr,\n      value: randomAttr.defaultValue\n    };\n    setActiveAttributes([...activeAttributes, newAttr]);\n  };\n  const clearAll = () => setActiveAttributes([]);\n  const randomizeAllAttributes = () => {\n    const randomizedAttributes = activeAttributes.map(attr => {\n      const def = CSS_ATTRIBUTES.find(d => d.id === attr.definition.id);\n      if (!def) return attr;\n      return {\n        ...attr,\n        value: generateRandomForAttr(def)\n      };\n    });\n    setActiveAttributes(randomizedAttributes);\n  };\n  const randomizeAttribute = attrId => {\n    const attr = activeAttributes.find(a => a.id === attrId);\n    if (!attr) return;\n    const def = attr.definition;\n    if (!def) return;\n    const randomValue = generateRandomForAttr(def);\n    setActiveAttributes(activeAttributes.map(a => a.id === attrId ? {\n      ...a,\n      value: randomValue\n    } : a));\n  };\n  const generateRandomForAttr = def => {\n    var _def$subAttributes;\n    const generateRandomColor = () => `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0')}`;\n    switch (def.controlType) {\n      case 'color':\n        return generateRandomColor();\n      case 'slider':\n        return Math.floor(Math.random() * (def.max - def.min + 1)) + def.min;\n      case 'select':\n        const opts = def.options || [];\n        if (opts.length === 0) return def.defaultValue;\n        return opts[Math.floor(Math.random() * opts.length)].value;\n      case 'checkbox':\n        return Math.random() > 0.5;\n      case 'multi':\n        const multiValue = {};\n        (_def$subAttributes = def.subAttributes) === null || _def$subAttributes === void 0 ? void 0 : _def$subAttributes.forEach(sub => {\n          multiValue[sub.id] = generateRandomForAttr(sub);\n        });\n        return multiValue;\n      case 'gradient':\n        return {\n          type: 'linear',\n          angle: Math.floor(Math.random() * 361),\n          colors: [generateRandomColor(), generateRandomColor()]\n        };\n      default:\n        return def.defaultValue;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"texture-creator\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Texture Creator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        gap: '12px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearAll,\n        children: \"Clear All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRandomize,\n        children: \"Randomize One\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: randomizeAllAttributes,\n        children: \"Randomize All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => saveToPalette(tileStyles),\n        children: \"Save to Palette\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AttributePanel, {\n      attributes: activeAttributes,\n      setAttributes: setActiveAttributes,\n      randomizeAttribute: randomizeAttribute\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_c = TextureCreator;\nexport default TextureCreator;\nvar _c;\n$RefreshReg$(_c, \"TextureCreator\");","map":{"version":3,"names":["React","AttributePanel","CSS_ATTRIBUTES","jsxDEV","_jsxDEV","TextureCreator","saveToPalette","activeAttributes","setActiveAttributes","tileStyles","handleRandomize","presentIds","map","attr","definition","id","availableAttrs","filter","includes","length","randomAttr","Math","floor","random","newAttr","Date","now","value","defaultValue","clearAll","randomizeAllAttributes","randomizedAttributes","def","find","d","generateRandomForAttr","randomizeAttribute","attrId","a","randomValue","_def$subAttributes","generateRandomColor","toString","padStart","controlType","max","min","opts","options","multiValue","subAttributes","forEach","sub","type","angle","colors","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","flexDirection","gap","onClick","attributes","setAttributes","_c","$RefreshReg$"],"sources":["/home/user/TileMonster/css-tile-forge/src/components/TextureCreator/TextureCreator.tsx"],"sourcesContent":["\nimport React from 'react';\nimport AttributePanel from '../AttributePanel/AttributePanel';\nimport { ActiveAttribute, TileStyle } from '../../data/types';\nimport { CSS_ATTRIBUTES } from '../../data/css-attributes';\n\ninterface TextureCreatorProps {\n  saveToPalette: (style: TileStyle) => void;\n  activeAttributes: ActiveAttribute[];\n  setActiveAttributes: React.Dispatch<React.SetStateAction<ActiveAttribute[]>>;\n  tileStyles: TileStyle;\n}\n\nconst TextureCreator: React.FC<TextureCreatorProps> = ({\n  saveToPalette,\n  activeAttributes,\n  setActiveAttributes,\n  tileStyles,\n}) => {\n\n  const handleRandomize = () => {\n    const presentIds = activeAttributes.map(attr => attr.definition.id);\n    const availableAttrs = CSS_ATTRIBUTES.filter(attr => !presentIds.includes(attr.id) || ['borderTop', 'borderRight', 'borderBottom', 'borderLeft'].includes(attr.id));\n    if (availableAttrs.length === 0) return;\n    const randomAttr = availableAttrs[Math.floor(Math.random() * availableAttrs.length)];\n\n    const newAttr: ActiveAttribute = {\n      id: `rand-${Date.now()}`,\n      definition: randomAttr,\n      value: randomAttr.defaultValue,\n    };\n\n    setActiveAttributes([...activeAttributes, newAttr]);\n  };\n\n  const clearAll = () => setActiveAttributes([]);\n\n  const randomizeAllAttributes = () => {\n    const randomizedAttributes = activeAttributes.map(attr => {\n      const def = CSS_ATTRIBUTES.find(d => d.id === attr.definition.id);\n      if (!def) return attr;\n      return {\n        ...attr,\n        value: generateRandomForAttr(def),\n      };\n    });\n    setActiveAttributes(randomizedAttributes);\n  };\n\n  const randomizeAttribute = (attrId: string) => {\n    const attr = activeAttributes.find(a => a.id === attrId);\n    if (!attr) return;\n    const def = attr.definition;\n    if (!def) return;\n    const randomValue = generateRandomForAttr(def);\n\n    setActiveAttributes(activeAttributes.map(a =>\n      a.id === attrId ? { ...a, value: randomValue } : a\n    ));\n  };\n\n  const generateRandomForAttr = (def: any): any => {\n    const generateRandomColor = () => `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0')}`;\n    switch (def.controlType) {\n      case 'color':\n        return generateRandomColor();\n      case 'slider':\n        return Math.floor(Math.random() * (def.max - def.min + 1)) + def.min;\n      case 'select':\n        const opts = def.options || [];\n        if (opts.length === 0) return def.defaultValue;\n        return opts[Math.floor(Math.random() * opts.length)].value;\n      case 'checkbox':\n        return Math.random() > 0.5;\n      case 'multi':\n        const multiValue: any = {};\n        def.subAttributes?.forEach((sub: any) => {\n          multiValue[sub.id] = generateRandomForAttr(sub);\n        });\n        return multiValue;\n      case 'gradient':\n        return {\n          type: 'linear',\n          angle: Math.floor(Math.random() * 361),\n          colors: [generateRandomColor(), generateRandomColor()],\n        };\n      default:\n        return def.defaultValue;\n    }\n  };\n\n  return (\n    <div className=\"texture-creator\">\n      <h2>Texture Creator</h2>\n      <div className=\"controls\" style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>\n        <button onClick={clearAll}>Clear All</button>\n        <button onClick={handleRandomize}>Randomize One</button>\n        <button onClick={randomizeAllAttributes}>Randomize All</button>\n        <button onClick={() => saveToPalette(tileStyles)}>Save to Palette</button>\n      </div>\n      <AttributePanel\n        attributes={activeAttributes}\n        setAttributes={setActiveAttributes}\n        randomizeAttribute={randomizeAttribute}\n      />\n    </div>\n  );\n};\n\nexport default TextureCreator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}