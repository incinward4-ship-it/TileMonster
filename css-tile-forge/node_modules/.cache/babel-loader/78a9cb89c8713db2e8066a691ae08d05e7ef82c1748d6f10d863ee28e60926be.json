{"ast":null,"code":"var _jsxFileName = \"/home/user/TileMonster/css-tile-forge/src/components/TextureCreator/TextureCreator.tsx\";\nimport React from 'react';\nimport AttributePanel from '../AttributePanel/AttributePanel';\nimport { CSS_ATTRIBUTES } from '../../data/css-attributes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextureCreator = ({\n  saveToPalette,\n  activeAttributes,\n  setActiveAttributes,\n  tileStyles\n}) => {\n  const handleRandomize = () => {\n    // Pick one random attribute not already present\n    const availableAttrs = CSS_ATTRIBUTES.filter(attr => !activeAttributes.some(a => a.definition.id === attr.id && !['borderTop', 'borderRight', 'borderBottom', 'borderLeft'].includes(attr.id)));\n    if (availableAttrs.length === 0) return;\n    const randomAttr = availableAttrs[Math.floor(Math.random() * availableAttrs.length)];\n\n    // Add attribute with defaults\n    const newAttr = {\n      id: `rand-${Date.now()}`,\n      definition: randomAttr,\n      value: randomAttr.defaultValue\n    };\n    setActiveAttributes([...activeAttributes, newAttr]);\n  };\n  const clearAll = () => setActiveAttributes([]);\n  const randomizeAttribute = attrId => {\n    const attr = activeAttributes.find(a => a.id === attrId);\n    if (!attr) return;\n    const randomValue = generateRandomForAttr(attr.definition);\n    setActiveAttributes(activeAttributes.map(a => a.id === attrId ? {\n      ...a,\n      value: randomValue\n    } : a));\n  };\n  const generateRandomForAttr = def => {\n    switch (def.controlType) {\n      case 'color':\n        return `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0')}`;\n      case 'slider':\n        return Math.floor(Math.random() * (def.max - def.min + 1)) + def.min;\n      case 'select':\n        {\n          const opts = def.options || [];\n          if (opts.length === 0) return def.defaultValue;\n          return opts[Math.floor(Math.random() * opts.length)].value;\n        }\n      case 'checkbox':\n        return Math.random() > 0.5;\n      case 'multi':\n        {\n          const newValue = {};\n          def.subAttributes.forEach(sub => {\n            newValue[sub.id] = generateRandomForAttr(sub);\n          });\n          return newValue;\n        }\n      default:\n        return def.defaultValue;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"texture-creator\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Texture Creator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        gap: '12px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearAll,\n        children: \"Clear All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRandomize,\n        children: \"Randomize\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => saveToPalette(tileStyles),\n        children: \"Save to Palette\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AttributePanel, {\n      attributes: activeAttributes,\n      setAttributes: setActiveAttributes,\n      randomizeAttribute: randomizeAttribute\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_c = TextureCreator;\nexport default TextureCreator;\nvar _c;\n$RefreshReg$(_c, \"TextureCreator\");","map":{"version":3,"names":["React","AttributePanel","CSS_ATTRIBUTES","jsxDEV","_jsxDEV","TextureCreator","saveToPalette","activeAttributes","setActiveAttributes","tileStyles","handleRandomize","availableAttrs","filter","attr","some","a","definition","id","includes","length","randomAttr","Math","floor","random","newAttr","Date","now","value","defaultValue","clearAll","randomizeAttribute","attrId","find","randomValue","generateRandomForAttr","map","def","controlType","toString","padStart","max","min","opts","options","newValue","subAttributes","forEach","sub","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","flexDirection","gap","onClick","attributes","setAttributes","_c","$RefreshReg$"],"sources":["/home/user/TileMonster/css-tile-forge/src/components/TextureCreator/TextureCreator.tsx"],"sourcesContent":["\nimport React from 'react';\nimport AttributePanel from '../AttributePanel/AttributePanel';\nimport { CSS_ATTRIBUTES, CssAttribute } from '../../data/css-attributes';\nimport { ActiveAttribute, TileStyle } from '../../data/types';\n\ninterface TextureCreatorProps {\n  saveToPalette: (style: TileStyle) => void;\n  activeAttributes: ActiveAttribute[];\n  setActiveAttributes: React.Dispatch<React.SetStateAction<ActiveAttribute[]>>;\n  tileStyles: TileStyle;\n}\n\nconst TextureCreator: React.FC<TextureCreatorProps> = ({\n  saveToPalette,\n  activeAttributes,\n  setActiveAttributes,\n  tileStyles,\n}) => {\n\n  const handleRandomize = () => {\n    // Pick one random attribute not already present\n    const availableAttrs = CSS_ATTRIBUTES.filter(attr =>\n      !activeAttributes.some(a => a.definition.id === attr.id && !['borderTop', 'borderRight', 'borderBottom', 'borderLeft'].includes(attr.id))\n    );\n\n    if(availableAttrs.length === 0) return;\n    const randomAttr = availableAttrs[Math.floor(Math.random()*availableAttrs.length)];\n\n    // Add attribute with defaults\n    const newAttr: ActiveAttribute = {\n      id: `rand-${Date.now()}`,\n      definition: randomAttr,\n      value: randomAttr.defaultValue,\n    };\n\n    setActiveAttributes([...activeAttributes, newAttr]);\n  };\n\n  const clearAll = () => setActiveAttributes([]);\n\n  const randomizeAttribute = (attrId: string) => {\n    const attr = activeAttributes.find(a => a.id === attrId);\n    if (!attr) return;\n\n    const randomValue = generateRandomForAttr(attr.definition);\n\n    setActiveAttributes(activeAttributes.map(a =>\n      a.id === attrId ? { ...a, value: randomValue } : a\n    ));\n  };\n\n  const generateRandomForAttr = (def: any): any => {\n    switch(def.controlType) {\n        case 'color': return `#${Math.floor(Math.random()*16777215).toString(16).padStart(6,'0')}`;\n        case 'slider': return Math.floor(Math.random() * (def.max - def.min + 1)) + def.min;\n        case 'select': {\n            const opts = def.options || [];\n            if(opts.length === 0) return def.defaultValue;\n            return opts[Math.floor(Math.random() * opts.length)].value;\n        }\n        case 'checkbox': return Math.random() > 0.5;\n        case 'multi': {\n            const newValue: { [key: string]: any } = {};\n            def.subAttributes.forEach((sub: any) => {\n                newValue[sub.id] = generateRandomForAttr(sub);\n            });\n            return newValue;\n        }\n        default: return def.defaultValue;\n    }\n  };\n\n  return (\n    <div className=\"texture-creator\">\n      <h2>Texture Creator</h2>\n      <div className=\"controls\" style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>\n        <button onClick={clearAll}>Clear All</button>\n        <button onClick={handleRandomize}>Randomize</button>\n        <button onClick={() => saveToPalette(tileStyles)}>Save to Palette</button>\n      </div>\n      <AttributePanel\n        attributes={activeAttributes}\n        setAttributes={setActiveAttributes}\n        randomizeAttribute={randomizeAttribute}\n      />\n    </div>\n  );\n};\n\nexport default TextureCreator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}