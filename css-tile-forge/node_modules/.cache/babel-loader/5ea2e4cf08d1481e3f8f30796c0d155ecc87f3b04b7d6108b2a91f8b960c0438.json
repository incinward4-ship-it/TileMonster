{"ast":null,"code":"var _jsxFileName = \"/home/user/TileMonster/css-tile-forge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport TextureCreator from './components/TextureCreator/TextureCreator';\nimport Sandbox from './components/Sandbox/Sandbox';\nimport Export from './components/Export/Export';\nimport './App.css';\n\n// Each cell in 32x32 grid stores either null or index into palette\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create empty 32x32 grid with null cells\nconst createEmptyGrid = () => Array.from({\n  length: 32\n}, () => Array(32).fill(null));\nfunction App() {\n  _s();\n  // Palette of saved tile styles\n  const [palette, setPalette] = useState([]);\n\n  // Current tile style being designed in TextureCreator\n  const [currentStyle, setCurrentStyle] = useState({});\n\n  // 32x32 sandbox grid storing indexes into palette or null\n  const [grid, setGrid] = useState(createEmptyGrid());\n\n  // Index of selected palette style for painting\n  const [selectedStyleIndex, setSelectedStyleIndex] = useState(null);\n\n  // Add current style to palette and auto-select it\n  const saveCurrentStyleToPalette = () => {\n    setPalette(prev => {\n      const newPalette = [...prev, currentStyle];\n      setSelectedStyleIndex(newPalette.length - 1);\n      return newPalette;\n    });\n  };\n\n  // Paint grid cell with selected style index\n  const paintCell = (row, col) => {\n    if (selectedStyleIndex === null) return;\n    const newGrid = grid.map(r => [...r]);\n    newGrid[row][col] = selectedStyleIndex;\n    setGrid(newGrid);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CSS-Tile-Forge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"App-main\",\n      children: [/*#__PURE__*/_jsxDEV(TextureCreator, {\n        tileStyles: currentStyle,\n        setTileStyles: setCurrentStyle,\n        saveToPalette: saveCurrentStyleToPalette\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Sandbox, {\n        palette: palette,\n        grid: grid,\n        paintCell: paintCell,\n        selectedStyleIndex: selectedStyleIndex,\n        setSelectedStyleIndex: setSelectedStyleIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Export, {\n        palette: palette,\n        grid: grid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"e2G0hY8ZhWiDM7oi49lO3wRNXmI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","TextureCreator","Sandbox","Export","jsxDEV","_jsxDEV","createEmptyGrid","Array","from","length","fill","App","_s","palette","setPalette","currentStyle","setCurrentStyle","grid","setGrid","selectedStyleIndex","setSelectedStyleIndex","saveCurrentStyleToPalette","prev","newPalette","paintCell","row","col","newGrid","map","r","className","children","fileName","_jsxFileName","lineNumber","columnNumber","tileStyles","setTileStyles","saveToPalette","_c","$RefreshReg$"],"sources":["/home/user/TileMonster/css-tile-forge/src/App.tsx"],"sourcesContent":["\nimport React, { useState } from 'react';\nimport TextureCreator from './components/TextureCreator/TextureCreator';\nimport Sandbox from './components/Sandbox/Sandbox';\nimport Export from './components/Export/Export';\nimport './App.css';\n\ntype TileStyle = React.CSSProperties;\n\n// Each cell in 32x32 grid stores either null or index into palette\ntype GridCell = number | null;\n\n\n// Create empty 32x32 grid with null cells\nconst createEmptyGrid = (): GridCell[][] =>\n  Array.from({ length: 32 }, () => Array(32).fill(null));\n\nfunction App() {\n  // Palette of saved tile styles\n  const [palette, setPalette] = useState<TileStyle[]>([]);\n\n  // Current tile style being designed in TextureCreator\n  const [currentStyle, setCurrentStyle] = useState<TileStyle>({});\n\n  // 32x32 sandbox grid storing indexes into palette or null\n  const [grid, setGrid] = useState<GridCell[][]>(createEmptyGrid());\n\n  // Index of selected palette style for painting\n  const [selectedStyleIndex, setSelectedStyleIndex] = useState<number | null>(null);\n\n  // Add current style to palette and auto-select it\n  const saveCurrentStyleToPalette = () => {\n    setPalette(prev => {\n      const newPalette = [...prev, currentStyle];\n      setSelectedStyleIndex(newPalette.length - 1);\n      return newPalette;\n    });\n  };\n\n  // Paint grid cell with selected style index\n  const paintCell = (row: number, col: number) => {\n    if (selectedStyleIndex === null) return;\n    const newGrid = grid.map(r => [...r]);\n    newGrid[row][col] = selectedStyleIndex;\n    setGrid(newGrid);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>CSS-Tile-Forge</h1>\n      </header>\n      <main className=\"App-main\">\n        <TextureCreator\n          tileStyles={currentStyle}\n          setTileStyles={setCurrentStyle}\n          saveToPalette={saveCurrentStyleToPalette}\n        />\n        <Sandbox\n          palette={palette}\n          grid={grid}\n          paintCell={paintCell}\n          selectedStyleIndex={selectedStyleIndex}\n          setSelectedStyleIndex={setSelectedStyleIndex}\n        />\n        <Export\n          palette={palette}\n          grid={grid}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}