{"ast":null,"code":"var _jsxFileName = \"/home/user/TileMonster/css-tile-forge/src/components/Sandbox/Sandbox.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Sandbox = ({\n  palette,\n  grid,\n  paintCell,\n  clearGrid,\n  randomizeGrid\n}) => {\n  _s();\n  const [isPainting, setIsPainting] = useState(false);\n  const [showGrid, setShowGrid] = useState(true);\n  const handleMouseDown = (rowIndex, cellIndex) => {\n    setIsPainting(true);\n    paintCell(rowIndex, cellIndex);\n  };\n  const handleMouseEnter = (rowIndex, cellIndex) => {\n    if (isPainting) {\n      paintCell(rowIndex, cellIndex);\n    }\n  };\n  const handleMouseUp = () => {\n    setIsPainting(false);\n  };\n  const handleMouseLeave = () => {\n    setIsPainting(false);\n  };\n  const toggleGridLines = () => {\n    setShowGrid(!showGrid);\n  };\n  const getCellStyle = (rowIndex, cellIndex) => {\n    const paletteIndex = grid[rowIndex][cellIndex];\n    if (paletteIndex === null) {\n      return {}; // Return empty style for empty cells\n    }\n    const tileStyle = palette[paletteIndex];\n    if (!tileStyle) return {};\n    const finalStyle = {\n      ...tileStyle\n    };\n    if (tileStyle.blend) {\n      var _palette, _palette2, _palette3, _palette4;\n      // Check for neighbors that are also in blend mode\n      const top = rowIndex > 0 && grid[rowIndex - 1][cellIndex] !== null && ((_palette = palette[grid[rowIndex - 1][cellIndex]]) === null || _palette === void 0 ? void 0 : _palette.blend);\n      const bottom = rowIndex < grid.length - 1 && grid[rowIndex + 1][cellIndex] !== null && ((_palette2 = palette[grid[rowIndex + 1][cellIndex]]) === null || _palette2 === void 0 ? void 0 : _palette2.blend);\n      const left = cellIndex > 0 && grid[rowIndex][cellIndex - 1] !== null && ((_palette3 = palette[grid[rowIndex][cellIndex - 1]]) === null || _palette3 === void 0 ? void 0 : _palette3.blend);\n      const right = cellIndex < grid[0].length - 1 && grid[rowIndex][cellIndex + 1] !== null && ((_palette4 = palette[grid[rowIndex][cellIndex + 1]]) === null || _palette4 === void 0 ? void 0 : _palette4.blend);\n\n      // Remove borders on adjacent sides\n      if (top) finalStyle.borderTopWidth = 0;\n      if (bottom) finalStyle.borderBottomWidth = 0;\n      if (left) finalStyle.borderLeftWidth = 0;\n      if (right) finalStyle.borderRightWidth = 0;\n\n      // Refine border radius at corners\n      if (top || left) finalStyle.borderTopLeftRadius = 0;\n      if (top || right) finalStyle.borderTopRightRadius = 0;\n      if (bottom || left) finalStyle.borderBottomLeftRadius = 0;\n      if (bottom || right) finalStyle.borderBottomRightRadius = 0;\n    }\n    finalStyle.transform = tileStyle.transform || 'none';\n    return finalStyle;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sandbox\",\n    onMouseUp: handleMouseUp,\n    onMouseLeave: handleMouseLeave,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sandbox-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearGrid,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: randomizeGrid,\n        children: \"Randomize\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleGridLines,\n        children: showGrid ? 'Hide Grid' : 'Show Grid'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `sandbox-grid ${!showGrid ? 'no-grid' : ''}`,\n      children: grid.map((row, rowIndex) => row.map((_, cellIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-cell\",\n        onMouseDown: () => handleMouseDown(rowIndex, cellIndex),\n        onMouseEnter: () => handleMouseEnter(rowIndex, cellIndex),\n        style: getCellStyle(rowIndex, cellIndex),\n        \"aria-label\": `Grid cell ${rowIndex + 1}, ${cellIndex + 1}`\n      }, `${rowIndex}-${cellIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(Sandbox, \"4wN1UDNyVB/NhyiuOw06N47kfv8=\");\n_c = Sandbox;\nexport default Sandbox;\nvar _c;\n$RefreshReg$(_c, \"Sandbox\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Sandbox","palette","grid","paintCell","clearGrid","randomizeGrid","_s","isPainting","setIsPainting","showGrid","setShowGrid","handleMouseDown","rowIndex","cellIndex","handleMouseEnter","handleMouseUp","handleMouseLeave","toggleGridLines","getCellStyle","paletteIndex","tileStyle","finalStyle","blend","_palette","_palette2","_palette3","_palette4","top","bottom","length","left","right","borderTopWidth","borderBottomWidth","borderLeftWidth","borderRightWidth","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","transform","className","onMouseUp","onMouseLeave","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","row","_","onMouseDown","onMouseEnter","style","_c","$RefreshReg$"],"sources":["/home/user/TileMonster/css-tile-forge/src/components/Sandbox/Sandbox.tsx"],"sourcesContent":["\nimport React, { useState } from 'react';\nimport { TileStyle } from '../../data/types';\n\ninterface SandboxProps {\n  palette: TileStyle[];\n  grid: (number | null)[][];\n  paintCell: (row: number, col: number) => void;\n  clearGrid: () => void;\n  randomizeGrid: () => void;\n}\n\nconst Sandbox: React.FC<SandboxProps> = ({\n  palette,\n  grid,\n  paintCell,\n  clearGrid,\n  randomizeGrid,\n}) => {\n  const [isPainting, setIsPainting] = useState(false);\n  const [showGrid, setShowGrid] = useState(true);\n\n  const handleMouseDown = (rowIndex: number, cellIndex: number) => {\n    setIsPainting(true);\n    paintCell(rowIndex, cellIndex);\n  };\n\n  const handleMouseEnter = (rowIndex: number, cellIndex: number) => {\n    if (isPainting) {\n      paintCell(rowIndex, cellIndex);\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsPainting(false);\n  };\n\n  const handleMouseLeave = () => {\n    setIsPainting(false);\n  };\n\n  const toggleGridLines = () => {\n    setShowGrid(!showGrid);\n  };\n\n  const getCellStyle = (rowIndex: number, cellIndex: number): React.CSSProperties => {\n    const paletteIndex = grid[rowIndex][cellIndex];\n\n    if (paletteIndex === null) {\n      return {}; // Return empty style for empty cells\n    }\n\n    const tileStyle = palette[paletteIndex];\n    if (!tileStyle) return {};\n\n    const finalStyle: TileStyle = { ...tileStyle };\n\n    if (tileStyle.blend) {\n      // Check for neighbors that are also in blend mode\n      const top = rowIndex > 0 && grid[rowIndex - 1][cellIndex] !== null && palette[grid[rowIndex - 1][cellIndex]!]?.blend;\n      const bottom = rowIndex < grid.length - 1 && grid[rowIndex + 1][cellIndex] !== null && palette[grid[rowIndex + 1][cellIndex]!]?.blend;\n      const left = cellIndex > 0 && grid[rowIndex][cellIndex - 1] !== null && palette[grid[rowIndex][cellIndex - 1]!]?.blend;\n      const right = cellIndex < grid[0].length - 1 && grid[rowIndex][cellIndex + 1] !== null && palette[grid[rowIndex][cellIndex + 1]!]?.blend;\n\n      // Remove borders on adjacent sides\n      if (top) finalStyle.borderTopWidth = 0;\n      if (bottom) finalStyle.borderBottomWidth = 0;\n      if (left) finalStyle.borderLeftWidth = 0;\n      if (right) finalStyle.borderRightWidth = 0;\n\n      // Refine border radius at corners\n      if (top || left) finalStyle.borderTopLeftRadius = 0;\n      if (top || right) finalStyle.borderTopRightRadius = 0;\n      if (bottom || left) finalStyle.borderBottomLeftRadius = 0;\n      if (bottom || right) finalStyle.borderBottomRightRadius = 0;\n    }\n\n    finalStyle.transform = tileStyle.transform || 'none';\n\n    return finalStyle;\n  };\n\n  return (\n    <div className=\"sandbox\" onMouseUp={handleMouseUp} onMouseLeave={handleMouseLeave}>\n      <div className=\"sandbox-controls\">\n        <button onClick={clearGrid}>Clear</button>\n        <button onClick={randomizeGrid}>Randomize</button>\n        <button onClick={toggleGridLines}>{showGrid ? 'Hide Grid' : 'Show Grid'}</button>\n      </div>\n      <div className={`sandbox-grid ${!showGrid ? 'no-grid' : ''}`}>\n        {grid.map((row, rowIndex) =>\n          row.map((_, cellIndex) => (\n            <div\n              key={`${rowIndex}-${cellIndex}`}\n              className=\"grid-cell\"\n              onMouseDown={() => handleMouseDown(rowIndex, cellIndex)}\n              onMouseEnter={() => handleMouseEnter(rowIndex, cellIndex)}\n              style={getCellStyle(rowIndex, cellIndex)}\n              aria-label={`Grid cell ${rowIndex + 1}, ${cellIndex + 1}`}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Sandbox;\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAWxC,MAAMC,OAA+B,GAAGA,CAAC;EACvCC,OAAO;EACPC,IAAI;EACJC,SAAS;EACTC,SAAS;EACTC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAMc,eAAe,GAAGA,CAACC,QAAgB,EAAEC,SAAiB,KAAK;IAC/DL,aAAa,CAAC,IAAI,CAAC;IACnBL,SAAS,CAACS,QAAQ,EAAEC,SAAS,CAAC;EAChC,CAAC;EAED,MAAMC,gBAAgB,GAAGA,CAACF,QAAgB,EAAEC,SAAiB,KAAK;IAChE,IAAIN,UAAU,EAAE;MACdJ,SAAS,CAACS,QAAQ,EAAEC,SAAS,CAAC;IAChC;EACF,CAAC;EAED,MAAME,aAAa,GAAGA,CAAA,KAAM;IAC1BP,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,MAAMQ,gBAAgB,GAAGA,CAAA,KAAM;IAC7BR,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,MAAMS,eAAe,GAAGA,CAAA,KAAM;IAC5BP,WAAW,CAAC,CAACD,QAAQ,CAAC;EACxB,CAAC;EAED,MAAMS,YAAY,GAAGA,CAACN,QAAgB,EAAEC,SAAiB,KAA0B;IACjF,MAAMM,YAAY,GAAGjB,IAAI,CAACU,QAAQ,CAAC,CAACC,SAAS,CAAC;IAE9C,IAAIM,YAAY,KAAK,IAAI,EAAE;MACzB,OAAO,CAAC,CAAC,CAAC,CAAC;IACb;IAEA,MAAMC,SAAS,GAAGnB,OAAO,CAACkB,YAAY,CAAC;IACvC,IAAI,CAACC,SAAS,EAAE,OAAO,CAAC,CAAC;IAEzB,MAAMC,UAAqB,GAAG;MAAE,GAAGD;IAAU,CAAC;IAE9C,IAAIA,SAAS,CAACE,KAAK,EAAE;MAAA,IAAAC,QAAA,EAAAC,SAAA,EAAAC,SAAA,EAAAC,SAAA;MACnB;MACA,MAAMC,GAAG,GAAGf,QAAQ,GAAG,CAAC,IAAIV,IAAI,CAACU,QAAQ,GAAG,CAAC,CAAC,CAACC,SAAS,CAAC,KAAK,IAAI,MAAAU,QAAA,GAAItB,OAAO,CAACC,IAAI,CAACU,QAAQ,GAAG,CAAC,CAAC,CAACC,SAAS,CAAC,CAAE,cAAAU,QAAA,uBAAvCA,QAAA,CAAyCD,KAAK;MACpH,MAAMM,MAAM,GAAGhB,QAAQ,GAAGV,IAAI,CAAC2B,MAAM,GAAG,CAAC,IAAI3B,IAAI,CAACU,QAAQ,GAAG,CAAC,CAAC,CAACC,SAAS,CAAC,KAAK,IAAI,MAAAW,SAAA,GAAIvB,OAAO,CAACC,IAAI,CAACU,QAAQ,GAAG,CAAC,CAAC,CAACC,SAAS,CAAC,CAAE,cAAAW,SAAA,uBAAvCA,SAAA,CAAyCF,KAAK;MACrI,MAAMQ,IAAI,GAAGjB,SAAS,GAAG,CAAC,IAAIX,IAAI,CAACU,QAAQ,CAAC,CAACC,SAAS,GAAG,CAAC,CAAC,KAAK,IAAI,MAAAY,SAAA,GAAIxB,OAAO,CAACC,IAAI,CAACU,QAAQ,CAAC,CAACC,SAAS,GAAG,CAAC,CAAC,CAAE,cAAAY,SAAA,uBAAvCA,SAAA,CAAyCH,KAAK;MACtH,MAAMS,KAAK,GAAGlB,SAAS,GAAGX,IAAI,CAAC,CAAC,CAAC,CAAC2B,MAAM,GAAG,CAAC,IAAI3B,IAAI,CAACU,QAAQ,CAAC,CAACC,SAAS,GAAG,CAAC,CAAC,KAAK,IAAI,MAAAa,SAAA,GAAIzB,OAAO,CAACC,IAAI,CAACU,QAAQ,CAAC,CAACC,SAAS,GAAG,CAAC,CAAC,CAAE,cAAAa,SAAA,uBAAvCA,SAAA,CAAyCJ,KAAK;;MAExI;MACA,IAAIK,GAAG,EAAEN,UAAU,CAACW,cAAc,GAAG,CAAC;MACtC,IAAIJ,MAAM,EAAEP,UAAU,CAACY,iBAAiB,GAAG,CAAC;MAC5C,IAAIH,IAAI,EAAET,UAAU,CAACa,eAAe,GAAG,CAAC;MACxC,IAAIH,KAAK,EAAEV,UAAU,CAACc,gBAAgB,GAAG,CAAC;;MAE1C;MACA,IAAIR,GAAG,IAAIG,IAAI,EAAET,UAAU,CAACe,mBAAmB,GAAG,CAAC;MACnD,IAAIT,GAAG,IAAII,KAAK,EAAEV,UAAU,CAACgB,oBAAoB,GAAG,CAAC;MACrD,IAAIT,MAAM,IAAIE,IAAI,EAAET,UAAU,CAACiB,sBAAsB,GAAG,CAAC;MACzD,IAAIV,MAAM,IAAIG,KAAK,EAAEV,UAAU,CAACkB,uBAAuB,GAAG,CAAC;IAC7D;IAEAlB,UAAU,CAACmB,SAAS,GAAGpB,SAAS,CAACoB,SAAS,IAAI,MAAM;IAEpD,OAAOnB,UAAU;EACnB,CAAC;EAED,oBACEtB,OAAA;IAAK0C,SAAS,EAAC,SAAS;IAACC,SAAS,EAAE3B,aAAc;IAAC4B,YAAY,EAAE3B,gBAAiB;IAAA4B,QAAA,gBAChF7C,OAAA;MAAK0C,SAAS,EAAC,kBAAkB;MAAAG,QAAA,gBAC/B7C,OAAA;QAAQ8C,OAAO,EAAEzC,SAAU;QAAAwC,QAAA,EAAC;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC1ClD,OAAA;QAAQ8C,OAAO,EAAExC,aAAc;QAAAuC,QAAA,EAAC;MAAS;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAClDlD,OAAA;QAAQ8C,OAAO,EAAE5B,eAAgB;QAAA2B,QAAA,EAAEnC,QAAQ,GAAG,WAAW,GAAG;MAAW;QAAAqC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9E,CAAC,eACNlD,OAAA;MAAK0C,SAAS,EAAE,gBAAgB,CAAChC,QAAQ,GAAG,SAAS,GAAG,EAAE,EAAG;MAAAmC,QAAA,EAC1D1C,IAAI,CAACgD,GAAG,CAAC,CAACC,GAAG,EAAEvC,QAAQ,KACtBuC,GAAG,CAACD,GAAG,CAAC,CAACE,CAAC,EAAEvC,SAAS,kBACnBd,OAAA;QAEE0C,SAAS,EAAC,WAAW;QACrBY,WAAW,EAAEA,CAAA,KAAM1C,eAAe,CAACC,QAAQ,EAAEC,SAAS,CAAE;QACxDyC,YAAY,EAAEA,CAAA,KAAMxC,gBAAgB,CAACF,QAAQ,EAAEC,SAAS,CAAE;QAC1D0C,KAAK,EAAErC,YAAY,CAACN,QAAQ,EAAEC,SAAS,CAAE;QACzC,cAAY,aAAaD,QAAQ,GAAG,CAAC,KAAKC,SAAS,GAAG,CAAC;MAAG,GALrD,GAAGD,QAAQ,IAAIC,SAAS,EAAE;QAAAiC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMhC,CACF,CACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC3C,EAAA,CA7FIN,OAA+B;AAAAwD,EAAA,GAA/BxD,OAA+B;AA+FrC,eAAeA,OAAO;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}