{"ast":null,"code":"var _jsxFileName = \"/home/user/TileMonster/css-tile-forge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TextureCreator from './components/TextureCreator/TextureCreator';\nimport Sandbox from './components/Sandbox/Sandbox';\nimport Export from './components/Export/Export';\nimport StylePalette from './components/StylePalette/StylePalette';\nimport Preview from './components/Preview/Preview';\nimport { buildTransformString } from './utils/styleHelpers';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createEmptyGrid = (rows, cols) => Array.from({\n  length: rows\n}, () => Array(cols).fill(null));\nconst defaultTileStyle = {\n  backgroundColor: '#d3d3d3',\n  border: '2px solid darkgrey',\n  borderRadius: '8px'\n};\nfunction App() {\n  _s();\n  const [palette, setPalette] = useState([]);\n  const [grid, setGrid] = useState(createEmptyGrid(32, 32));\n  const [selectedStyleIndex, setSelectedStyleIndex] = useState(null);\n  const [activeAttributes, setActiveAttributes] = useState([]);\n  const [tileStyles, setTileStyles] = useState(defaultTileStyle);\n  const [isBlendMode, setIsBlendMode] = useState(false);\n  useEffect(() => {\n    const newStyles = {};\n    activeAttributes.forEach(({\n      definition,\n      value\n    }) => {\n      // This logic can be simplified, but we'll keep it for now\n      if (definition.id === 'transform') {\n        newStyles.transform = buildTransformString(value);\n      } else {\n        Object.assign(newStyles, value);\n      }\n    });\n    setTileStyles(activeAttributes.length > 0 ? newStyles : defaultTileStyle);\n  }, [activeAttributes]);\n  const saveStyleToPalette = () => {\n    const finalStyle = {\n      ...tileStyles,\n      blend: isBlendMode\n    };\n    setPalette(prev => {\n      const newPalette = [...prev, finalStyle];\n      setSelectedStyleIndex(newPalette.length - 1);\n      return newPalette;\n    });\n  };\n  const paintCell = (row, col) => {\n    if (selectedStyleIndex === null) return;\n    setGrid(currentGrid => {\n      const newGrid = currentGrid.map(r => [...r]);\n      if (newGrid[row] && newGrid[row][col] !== undefined) {\n        newGrid[row][col] = selectedStyleIndex;\n      }\n      return newGrid;\n    });\n  };\n  const clearGrid = () => {\n    setGrid(prevGrid => {\n      var _prevGrid$;\n      return createEmptyGrid(prevGrid.length, ((_prevGrid$ = prevGrid[0]) === null || _prevGrid$ === void 0 ? void 0 : _prevGrid$.length) || 32);\n    });\n  };\n  const randomizeGrid = () => {\n    if (palette.length === 0) return;\n    setGrid(prevGrid => prevGrid.map(row => row.map(() => Math.random() > 0.7 ? null : Math.floor(Math.random() * palette.length))));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header-sticky\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo-tile\",\n        style: tileStyles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CSS-Tile-Forge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StylePalette, {\n        palette: palette,\n        selectedStyleIndex: selectedStyleIndex,\n        setSelectedStyleIndex: setSelectedStyleIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"App-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-column\",\n        children: [/*#__PURE__*/_jsxDEV(TextureCreator, {\n          saveToPalette: saveStyleToPalette,\n          activeAttributes: activeAttributes,\n          setActiveAttributes: setActiveAttributes,\n          tileStyles: tileStyles\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Preview, {\n          tileStyles: tileStyles,\n          isBlendMode: isBlendMode,\n          onBlendChange: setIsBlendMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-column\",\n        children: /*#__PURE__*/_jsxDEV(Sandbox, {\n          palette: palette,\n          grid: grid,\n          setGrid: setGrid,\n          paintCell: paintCell,\n          clearGrid: clearGrid,\n          randomizeGrid: randomizeGrid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-column\",\n        children: /*#__PURE__*/_jsxDEV(Export, {\n          palette: palette,\n          grid: grid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bKWm7zqcWTg9l8Hz0ozhsD57kZ8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TextureCreator","Sandbox","Export","StylePalette","Preview","buildTransformString","jsxDEV","_jsxDEV","createEmptyGrid","rows","cols","Array","from","length","fill","defaultTileStyle","backgroundColor","border","borderRadius","App","_s","palette","setPalette","grid","setGrid","selectedStyleIndex","setSelectedStyleIndex","activeAttributes","setActiveAttributes","tileStyles","setTileStyles","isBlendMode","setIsBlendMode","newStyles","forEach","definition","value","id","transform","Object","assign","saveStyleToPalette","finalStyle","blend","prev","newPalette","paintCell","row","col","currentGrid","newGrid","map","r","undefined","clearGrid","prevGrid","_prevGrid$","randomizeGrid","Math","random","floor","className","children","style","fileName","_jsxFileName","lineNumber","columnNumber","saveToPalette","onBlendChange","_c","$RefreshReg$"],"sources":["/home/user/TileMonster/css-tile-forge/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TextureCreator from './components/TextureCreator/TextureCreator';\nimport Sandbox from './components/Sandbox/Sandbox';\nimport Export from './components/Export/Export';\nimport StylePalette from './components/StylePalette/StylePalette';\nimport Preview from './components/Preview/Preview';\nimport { TileStyle, ActiveAttribute } from './data/types';\nimport { CSS_ATTRIBUTES } from './data/css-attributes';\nimport { buildTransformString } from './utils/styleHelpers';\nimport './App.css';\n\ntype GridCell = number | null;\nconst createEmptyGrid = (rows: number, cols: number): GridCell[][] => Array.from({ length: rows }, () => Array(cols).fill(null));\n\nconst defaultTileStyle: TileStyle = {\n  backgroundColor: '#d3d3d3',\n  border: '2px solid darkgrey',\n  borderRadius: '8px',\n};\n\nfunction App() {\n  const [palette, setPalette] = useState<TileStyle[]>([]);\n  const [grid, setGrid] = useState<GridCell[][]>(createEmptyGrid(32, 32));\n  const [selectedStyleIndex, setSelectedStyleIndex] = useState<number | null>(null);\n  const [activeAttributes, setActiveAttributes] = useState<ActiveAttribute[]>([]);\n  const [tileStyles, setTileStyles] = useState<TileStyle>(defaultTileStyle);\n  const [isBlendMode, setIsBlendMode] = useState(false);\n\n  useEffect(() => {\n    const newStyles: React.CSSProperties = {};\n    activeAttributes.forEach(({ definition, value }) => {\n      // This logic can be simplified, but we'll keep it for now\n      if (definition.id === 'transform') {\n        newStyles.transform = buildTransformString(value);\n      } else {\n        Object.assign(newStyles, value);\n      }\n    });\n    setTileStyles(activeAttributes.length > 0 ? newStyles : defaultTileStyle);\n  }, [activeAttributes]);\n\n  const saveStyleToPalette = () => {\n    const finalStyle: TileStyle = { ...tileStyles, blend: isBlendMode };\n    setPalette(prev => {\n      const newPalette = [...prev, finalStyle];\n      setSelectedStyleIndex(newPalette.length - 1);\n      return newPalette;\n    });\n  };\n\n  const paintCell = (row: number, col: number) => {\n    if (selectedStyleIndex === null) return;\n    setGrid(currentGrid => {\n      const newGrid = currentGrid.map(r => [...r]);\n      if (newGrid[row] && newGrid[row][col] !== undefined) {\n        newGrid[row][col] = selectedStyleIndex;\n      }\n      return newGrid;\n    });\n  };\n  \n  const clearGrid = () => {\n    setGrid(prevGrid => createEmptyGrid(prevGrid.length, prevGrid[0]?.length || 32));\n  };\n\n  const randomizeGrid = () => {\n    if (palette.length === 0) return;\n    setGrid(prevGrid => \n      prevGrid.map(row =>\n        row.map(() => (Math.random() > 0.7 ? null : Math.floor(Math.random() * palette.length)))\n      )\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header-sticky\">\n        <div className=\"logo-tile\" style={tileStyles}></div>\n        <h1>CSS-Tile-Forge</h1>\n        <StylePalette\n          palette={palette}\n          selectedStyleIndex={selectedStyleIndex}\n          setSelectedStyleIndex={setSelectedStyleIndex}\n        />\n      </header>\n\n      <main className=\"App-main\">\n        <div className=\"left-column\">\n          <TextureCreator\n            saveToPalette={saveStyleToPalette}\n            activeAttributes={activeAttributes}\n            setActiveAttributes={setActiveAttributes}\n            tileStyles={tileStyles}\n          />\n          <Preview\n            tileStyles={tileStyles}\n            isBlendMode={isBlendMode}\n            onBlendChange={setIsBlendMode}\n          />\n        </div>\n\n        <div className=\"center-column\">\n          <Sandbox\n            palette={palette}\n            grid={grid}\n            setGrid={setGrid}\n            paintCell={paintCell}\n            clearGrid={clearGrid}\n            randomizeGrid={randomizeGrid}\n          />\n        </div>\n\n        <div className=\"right-column\">\n          <Export palette={palette} grid={grid} />\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}