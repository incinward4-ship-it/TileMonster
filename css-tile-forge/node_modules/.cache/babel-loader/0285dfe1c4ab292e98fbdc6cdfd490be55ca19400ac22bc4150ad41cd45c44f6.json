{"ast":null,"code":"const evolveStyle = (style1, style2) => {\n  const childStyle = {};\n  const allKeys = Array.from(new Set([...Object.keys(style1), ...Object.keys(style2)]));\n  allKeys.forEach(key => {\n    if (key === 'blend') return;\n    const fromParent1 = style1[key] !== undefined;\n    const fromParent2 = style2[key] !== undefined;\n    if (fromParent1 && fromParent2) {\n      // 50% for 1 from style 1, 50% for 2nd in style 2\n      childStyle[key] = Math.random() < 0.5 ? style1[key] : style2[key];\n    } else if (fromParent1) {\n      //Add keys that arnt even in style 2\n      childStyle[key] = style1[key];\n    } else if (fromParent2) {\n      //Add keys that arnt even in style 1\n      childStyle[key] = style2[key];\n    }\n  });\n  // Return a NEW TileStyle object instead of modifying one\n  return {\n    ...childStyle\n  };\n};","map":{"version":3,"names":["evolveStyle","style1","style2","childStyle","allKeys","Array","from","Set","Object","keys","forEach","key","fromParent1","undefined","fromParent2","Math","random"],"sources":["/home/user/TileMonster/css-tile-forge/src/App.tsx"],"sourcesContent":["const evolveStyle = (style1: TileStyle, style2: TileStyle): TileStyle => {\n  const childStyle: TileStyle = {};\n  const allKeys = Array.from(new Set([...Object.keys(style1), ...Object.keys(style2)])) as (keyof TileStyle)[];\n\n  allKeys.forEach(key => {\n    if (key === 'blend') return;\n    const fromParent1 = style1[key] !== undefined;\n    const fromParent2 = style2[key] !== undefined;\n\n    if (fromParent1 && fromParent2) {\n      // 50% for 1 from style 1, 50% for 2nd in style 2\n      childStyle[key] = Math.random() < 0.5 ? style1[key] : style2[key];\n    } else if (fromParent1) {\n      //Add keys that arnt even in style 2\n      childStyle[key] = style1[key];\n    } else if (fromParent2) {\n      //Add keys that arnt even in style 1\n      childStyle[key] = style2[key];\n    }\n  });\n  // Return a NEW TileStyle object instead of modifying one\n  return { ...childStyle };\n};"],"mappings":"AAAA,MAAMA,WAAW,GAAGA,CAACC,MAAiB,EAAEC,MAAiB,KAAgB;EACvE,MAAMC,UAAqB,GAAG,CAAC,CAAC;EAChC,MAAMC,OAAO,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAAC,CAAC,GAAGC,MAAM,CAACC,IAAI,CAACR,MAAM,CAAC,EAAE,GAAGO,MAAM,CAACC,IAAI,CAACP,MAAM,CAAC,CAAC,CAAC,CAAwB;EAE5GE,OAAO,CAACM,OAAO,CAACC,GAAG,IAAI;IACrB,IAAIA,GAAG,KAAK,OAAO,EAAE;IACrB,MAAMC,WAAW,GAAGX,MAAM,CAACU,GAAG,CAAC,KAAKE,SAAS;IAC7C,MAAMC,WAAW,GAAGZ,MAAM,CAACS,GAAG,CAAC,KAAKE,SAAS;IAE7C,IAAID,WAAW,IAAIE,WAAW,EAAE;MAC9B;MACAX,UAAU,CAACQ,GAAG,CAAC,GAAGI,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAGf,MAAM,CAACU,GAAG,CAAC,GAAGT,MAAM,CAACS,GAAG,CAAC;IACnE,CAAC,MAAM,IAAIC,WAAW,EAAE;MACtB;MACAT,UAAU,CAACQ,GAAG,CAAC,GAAGV,MAAM,CAACU,GAAG,CAAC;IAC/B,CAAC,MAAM,IAAIG,WAAW,EAAE;MACtB;MACAX,UAAU,CAACQ,GAAG,CAAC,GAAGT,MAAM,CAACS,GAAG,CAAC;IAC/B;EACF,CAAC,CAAC;EACF;EACA,OAAO;IAAE,GAAGR;EAAW,CAAC;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}