{"ast":null,"code":"var _jsxFileName = \"/home/user/TileMonster/css-tile-forge/src/components/Export/Export.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Export = ({\n  palette,\n  grid\n}) => {\n  const generateCSS = () => {\n    var _grid$;\n    let css = '/* Generated Tile Styles */\\n\\n';\n\n    // Generate CSS for each tile style\n    palette.forEach((style, index) => {\n      css += `.tile-${index} {\\n`;\n      Object.entries(style).forEach(([property, value]) => {\n        if (property !== 'blend' && value !== undefined) {\n          // Convert camelCase to kebab-case\n          const cssProperty = property.replace(/([A-Z])/g, '-\\$$1').toLowerCase();\n          css += `  ${cssProperty}: ${value};\\n`;\n        }\n      });\n      css += '}\\n\\n';\n    });\n\n    // Generate HTML structure\n    css += '/* HTML Structure */\\n';\n    css += '/*\\n';\n    css += '<div class=\"tile-grid\">\\n';\n    grid.forEach((row, rowIndex) => {\n      row.forEach((cell, colIndex) => {\n        if (cell !== null) {\n          css += `  <div class=\"tile tile-${cell}\" data-row=\"${rowIndex}\" data-col=\"${colIndex}\"></div>\\n`;\n        }\n      });\n    });\n    css += '</div>\\n';\n    css += '*/\\n\\n';\n\n    // Grid layout CSS\n    css += '.tile-grid {\\n';\n    css += `  display: grid;\\n`;\n    css += `  grid-template-columns: repeat(${((_grid$ = grid[0]) === null || _grid$ === void 0 ? void 0 : _grid$.length) || 0}, 1fr);\\n`;\n    css += `  grid-template-rows: repeat(${grid.length}, 1fr);\\n`;\n    css += `  gap: 0;\\n`;\n    css += '}\\n\\n';\n    css += '.tile {\\n';\n    css += '  box-sizing: border-box;\\n';\n    css += '}';\n    return css;\n  };\n  const generateJSON = () => {\n    var _grid$2;\n    return JSON.stringify({\n      palette,\n      grid,\n      gridDimensions: {\n        rows: grid.length,\n        cols: ((_grid$2 = grid[0]) === null || _grid$2 === void 0 ? void 0 : _grid$2.length) || 0\n      }\n    }, null, 2);\n  };\n  const copyToClipboard = text => {\n    navigator.clipboard.writeText(text).then(() => {\n      alert('Copied to clipboard!');\n    }).catch(() => {\n      alert('Failed to copy to clipboard');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"export-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Export\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"CSS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => copyToClipboard(generateCSS()),\n        children: \"Copy CSS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: generateCSS()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"JSON Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => copyToClipboard(generateJSON()),\n        children: \"Copy JSON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: generateJSON()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_c = Export;\nexport default Export;\nvar _c;\n$RefreshReg$(_c, \"Export\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Export","palette","grid","generateCSS","_grid$","css","forEach","style","index","Object","entries","property","value","undefined","cssProperty","replace","toLowerCase","row","rowIndex","cell","colIndex","length","generateJSON","_grid$2","JSON","stringify","gridDimensions","rows","cols","copyToClipboard","text","navigator","clipboard","writeText","then","alert","catch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/user/TileMonster/css-tile-forge/src/components/Export/Export.tsx"],"sourcesContent":["import React from 'react';\nimport { TileStyle } from '../../data/types';\n\ninterface ExportProps {\n  palette: TileStyle[];\n  grid: (number | null)[][];\n}\n\nconst Export: React.FC<ExportProps> = ({ palette, grid }) => {\n  const generateCSS = () => {\n    let css = '/* Generated Tile Styles */\\n\\n';\n    \n    // Generate CSS for each tile style\n    palette.forEach((style, index) => {\n      css += `.tile-${index} {\\n`;\n      Object.entries(style).forEach(([property, value]) => {\n        if (property !== 'blend' && value !== undefined) {\n          // Convert camelCase to kebab-case\n          const cssProperty = property.replace(/([A-Z])/g, '-\\$$1').toLowerCase();\n          css += `  ${cssProperty}: ${value};\\n`;\n        }\n      });\n      css += '}\\n\\n';\n    });\n\n    // Generate HTML structure\n    css += '/* HTML Structure */\\n';\n    css += '/*\\n';\n    css += '<div class=\"tile-grid\">\\n';\n    grid.forEach((row, rowIndex) => {\n      row.forEach((cell, colIndex) => {\n        if (cell !== null) {\n          css += `  <div class=\"tile tile-${cell}\" data-row=\"${rowIndex}\" data-col=\"${colIndex}\"></div>\\n`;\n        }\n      });\n    });\n    css += '</div>\\n';\n    css += '*/\\n\\n';\n\n    // Grid layout CSS\n    css += '.tile-grid {\\n';\n    css += `  display: grid;\\n`;\n    css += `  grid-template-columns: repeat(${grid[0]?.length || 0}, 1fr);\\n`;\n    css += `  grid-template-rows: repeat(${grid.length}, 1fr);\\n`;\n    css += `  gap: 0;\\n`;\n    css += '}\\n\\n';\n\n    css += '.tile {\\n';\n    css += '  box-sizing: border-box;\\n';\n    css += '}';\n\n    return css;\n  };\n\n  const generateJSON = () => {\n    return JSON.stringify({\n      palette,\n      grid,\n      gridDimensions: {\n        rows: grid.length,\n        cols: grid[0]?.length || 0\n      }\n    }, null, 2);\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text).then(() => {\n      alert('Copied to clipboard!');\n    }).catch(() => {\n      alert('Failed to copy to clipboard');\n    });\n  };\n\n  return (\n    <div className=\"export-section\">\n      <h3>Export</h3>\n      \n      <div>\n        <h4>CSS</h4>\n        <button onClick={() => copyToClipboard(generateCSS())}>\n          Copy CSS\n        </button>\n        <pre>{generateCSS()}</pre>\n      </div>\n\n      <div>\n        <h4>JSON Data</h4>\n        <button onClick={() => copyToClipboard(generateJSON())}>\n          Copy JSON\n        </button>\n        <pre>{generateJSON()}</pre>\n      </div>\n    </div>\n  );\n};\n\nexport default Export;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}