{"ast":null,"code":"var _jsxFileName = \"/home/user/TileMonster/css-tile-forge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TextureCreator from './components/TextureCreator/TextureCreator';\nimport Sandbox from './components/Sandbox/Sandbox';\nimport Export from './components/Export/Export';\nimport StylePalette from './components/StylePalette/StylePalette';\nimport Preview from './components/Preview/Preview';\nimport { buildTransformString, buildFilterString, buildGradientString } from './utils/styleHelpers';\nimport './App.css';\nimport { CSS_ATTRIBUTES } from './data/css-attributes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createEmptyGrid = (rows, cols) => Array.from({\n  length: rows\n}, () => Array(cols).fill(null));\nconst defaultTileStyle = {\n  backgroundColor: '#d3d3d3',\n  border: '2px solid darkgrey',\n  borderRadius: '8px'\n};\nconst randomColor = () => `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0')}`;\nconst randomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\nconst evolveStyle = (style1, style2) => {\n  const childStyle = {};\n  const allKeys = Array.from(new Set([...Object.keys(style1), ...Object.keys(style2)]));\n  allKeys.forEach(key => {\n    if (key === 'blend') return;\n    const fromParent1 = style1[key] !== undefined;\n    const fromParent2 = style2[key] !== undefined;\n    if (fromParent1 && fromParent2) {\n      childStyle[key] = Math.random() < 0.5 ? style1[key] : style2[key];\n    } else if (fromParent1) {\n      childStyle[key] = style1[key];\n    } else if (fromParent2) {\n      childStyle[key] = style2[key];\n    }\n  });\n  return childStyle;\n};\nfunction App() {\n  _s();\n  const [palette, setPalette] = useState([]);\n  const [grid, setGrid] = useState(createEmptyGrid(16, 16));\n  const [selectedStyleIndices, setSelectedStyleIndices] = useState([]);\n  const [activeAttributes, setActiveAttributes] = useState([]);\n  const [tileStyles, setTileStyles] = useState(defaultTileStyle);\n  const [isBlendMode, setIsBlendMode] = useState(false);\n  useEffect(() => {\n    if (selectedStyleIndices.length !== 1) {\n      setTileStyles(defaultTileStyle);\n      setActiveAttributes([]);\n      return;\n    }\n    const selectedStyle = palette[selectedStyleIndices[0]];\n    setTileStyles(selectedStyle);\n    const newActiveAttributes = [];\n    for (const key in selectedStyle) {\n      if (key !== 'blend') {\n        const definition = CSS_ATTRIBUTES.find(def => def.id === key);\n        if (definition) {\n          newActiveAttributes.push({\n            id: key,\n            definition,\n            value: selectedStyle[key]\n          });\n        }\n      }\n    }\n    setActiveAttributes(newActiveAttributes);\n  }, [selectedStyleIndices, palette]);\n  useEffect(() => {\n    const newStyles = {};\n    activeAttributes.forEach(attr => {\n      const {\n        definition,\n        value\n      } = attr;\n      switch (definition.id) {\n        case 'backgroundColor':\n          newStyles.backgroundColor = value;\n          break;\n        case 'backgroundImage':\n          if (value && value.colors && value.colors.length >= 2) {\n            newStyles.backgroundImage = buildGradientString(value);\n          }\n          break;\n        case 'border':\n          if (value) {\n            newStyles.border = `${value.width}px ${value.style} ${value.color}`;\n          }\n          break;\n        case 'borderTop':\n          if (value) {\n            newStyles.borderTop = `${value.width}px ${value.style} ${value.color}`;\n          }\n          break;\n        case 'borderRight':\n          if (value) {\n            newStyles.borderRight = `${value.width}px ${value.style} ${value.color}`;\n          }\n          break;\n        case 'borderBottom':\n          if (value) {\n            newStyles.borderBottom = `${value.width}px ${value.style} ${value.color}`;\n          }\n          break;\n        case 'borderLeft':\n          if (value) {\n            newStyles.borderLeft = `${value.width}px ${value.style} ${value.color}`;\n          }\n          break;\n        case 'borderRadius':\n          newStyles.borderRadius = `${value}px`;\n          break;\n        case 'opacity':\n          newStyles.opacity = value;\n          break;\n        case 'boxShadow':\n          if (value) {\n            newStyles.boxShadow = `${value.x}px ${value.y}px ${value.blur}px ${value.spread}px ${value.color}`;\n          }\n          break;\n        case 'transform':\n          if (value) {\n            newStyles.transform = buildTransformString(value);\n          }\n          break;\n        case 'filter':\n          if (value) {\n            newStyles.filter = buildFilterString(value);\n          }\n          break;\n        default:\n          newStyles[definition.id] = value;\n          break;\n      }\n    });\n    setTileStyles(newStyles);\n  }, [activeAttributes]);\n  const getRawStyleFromAttributes = attributes => {\n    const rawStyle = {};\n    attributes.forEach(attr => {\n      rawStyle[attr.definition.id] = attr.value;\n    });\n    return rawStyle;\n  };\n  const saveStyleToPalette = () => {\n    const rawStyle = getRawStyleFromAttributes(activeAttributes);\n    const finalStyle = {\n      ...rawStyle,\n      blend: isBlendMode\n    };\n    setPalette(prev => {\n      const newPalette = [...prev, finalStyle];\n      setSelectedStyleIndices([newPalette.length - 1]);\n      return newPalette;\n    });\n  };\n  const handleUpdate = () => {\n    if (selectedStyleIndices.length !== 1) return;\n    const rawStyle = getRawStyleFromAttributes(activeAttributes);\n    const updatedStyle = {\n      ...rawStyle,\n      blend: isBlendMode\n    };\n    setPalette(prev => {\n      const newPalette = [...prev];\n      newPalette[selectedStyleIndices[0]] = updatedStyle;\n      return newPalette;\n    });\n  };\n  const handleEvolve = () => {\n    if (selectedStyleIndices.length !== 2) return;\n    const parent1 = palette[selectedStyleIndices[0]];\n    const parent2 = palette[selectedStyleIndices[1]];\n    const childStyle = evolveStyle(parent1, parent2);\n    setPalette(prev => {\n      const newPalette = [...prev, childStyle];\n      setSelectedStyleIndices([newPalette.length - 1]);\n      return newPalette;\n    });\n  };\n  const handleDelete = () => {\n    if (selectedStyleIndices.length === 0) return;\n    const sortedIndices = [...selectedStyleIndices].sort((a, b) => b - a);\n    let newPalette = [...palette];\n    sortedIndices.forEach(index => newPalette.splice(index, 1));\n    const indexMap = new Map();\n    let newIndex = 0;\n    palette.forEach((_, oldIndex) => {\n      if (selectedStyleIndices.includes(oldIndex)) {\n        indexMap.set(oldIndex, null);\n      } else {\n        indexMap.set(oldIndex, newIndex++);\n      }\n    });\n    const newGrid = grid.map(row => row.map(cell => {\n      var _indexMap$get;\n      if (cell === null) return null;\n      return (_indexMap$get = indexMap.get(cell)) !== null && _indexMap$get !== void 0 ? _indexMap$get : null;\n    }));\n    setPalette(newPalette);\n    setGrid(newGrid);\n    setSelectedStyleIndices([]);\n  };\n  const paintCell = (row, col) => {\n    if (selectedStyleIndices.length === 0) return;\n    const styleIndexToPaint = selectedStyleIndices[selectedStyleIndices.length - 1];\n    const newGrid = grid.map(r => [...r]);\n    if (newGrid[row] && newGrid[row][col] !== undefined) {\n      newGrid[row][col] = styleIndexToPaint;\n      setGrid(newGrid);\n    }\n  };\n  const clearGrid = () => {\n    const {\n      length: rows,\n      0: {\n        length: cols\n      }\n    } = grid;\n    setGrid(createEmptyGrid(rows, cols));\n  };\n  const randomizeGrid = () => {\n    if (palette.length === 0) return;\n    const {\n      length: rows,\n      0: {\n        length: cols\n      }\n    } = grid;\n    const newGrid = Array.from({\n      length: rows\n    }, () => Array.from({\n      length: cols\n    }, () => Math.random() > 0.7 ? null : Math.floor(Math.random() * palette.length)));\n    setGrid(newGrid);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header-sticky\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"large-logo-tile blinking-eye\",\n        style: tileStyles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"app-title\",\n        children: \"Tile Monster\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StylePalette, {\n        palette: palette,\n        selectedStyleIndices: selectedStyleIndices,\n        setSelectedStyleIndices: setSelectedStyleIndices,\n        onUpdate: handleUpdate,\n        onEvolve: handleEvolve,\n        onDelete: handleDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"App-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-column\",\n        children: [/*#__PURE__*/_jsxDEV(TextureCreator, {\n          saveToPalette: saveStyleToPalette,\n          activeAttributes: activeAttributes,\n          setActiveAttributes: setActiveAttributes,\n          tileStyles: tileStyles\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Preview, {\n          tileStyles: tileStyles,\n          isBlendMode: isBlendMode,\n          onBlendChange: setIsBlendMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-column\",\n        children: /*#__PURE__*/_jsxDEV(Sandbox, {\n          palette: palette,\n          grid: grid,\n          paintCell: paintCell,\n          clearGrid: clearGrid,\n          randomizeGrid: randomizeGrid,\n          setGrid: setGrid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-column\",\n        children: /*#__PURE__*/_jsxDEV(Export, {\n          palette: palette,\n          grid: grid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"i5aPpgKn52j0ZaCnTw9IRmR5VsA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TextureCreator","Sandbox","Export","StylePalette","Preview","buildTransformString","buildFilterString","buildGradientString","CSS_ATTRIBUTES","jsxDEV","_jsxDEV","createEmptyGrid","rows","cols","Array","from","length","fill","defaultTileStyle","backgroundColor","border","borderRadius","randomColor","Math","floor","random","toString","padStart","randomInt","min","max","evolveStyle","style1","style2","childStyle","allKeys","Set","Object","keys","forEach","key","fromParent1","undefined","fromParent2","App","_s","palette","setPalette","grid","setGrid","selectedStyleIndices","setSelectedStyleIndices","activeAttributes","setActiveAttributes","tileStyles","setTileStyles","isBlendMode","setIsBlendMode","selectedStyle","newActiveAttributes","definition","find","def","id","push","value","newStyles","attr","colors","backgroundImage","width","style","color","borderTop","borderRight","borderBottom","borderLeft","opacity","boxShadow","x","y","blur","spread","transform","filter","getRawStyleFromAttributes","attributes","rawStyle","saveStyleToPalette","finalStyle","blend","prev","newPalette","handleUpdate","updatedStyle","handleEvolve","parent1","parent2","handleDelete","sortedIndices","sort","a","b","index","splice","indexMap","Map","newIndex","_","oldIndex","includes","set","newGrid","map","row","cell","_indexMap$get","get","paintCell","col","styleIndexToPaint","r","clearGrid","randomizeGrid","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onUpdate","onEvolve","onDelete","saveToPalette","onBlendChange","_c","$RefreshReg$"],"sources":["/home/user/TileMonster/css-tile-forge/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TextureCreator from './components/TextureCreator/TextureCreator';\nimport Sandbox from './components/Sandbox/Sandbox';\nimport Export from './components/Export/Export';\nimport StylePalette from './components/StylePalette/StylePalette';\nimport Preview from './components/Preview/Preview';\nimport { TileStyle, ActiveAttribute } from './data/types';\nimport { buildTransformString, buildFilterString, buildGradientString } from './utils/styleHelpers';\nimport './App.css';\nimport { CSS_ATTRIBUTES } from './data/css-attributes';\n\ntype GridCell = number | null;\nconst createEmptyGrid = (rows: number, cols: number): GridCell[][] => Array.from({ length: rows }, () => Array(cols).fill(null));\n\nconst defaultTileStyle: TileStyle = {\n  backgroundColor: '#d3d3d3',\n  border: '2px solid darkgrey',\n  borderRadius: '8px',\n};\n\nconst randomColor = () => `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0')}`;\nconst randomInt = (min: number, max: number) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nconst evolveStyle = (style1: TileStyle, style2: TileStyle): TileStyle => {\n  const childStyle: TileStyle = {};\n  const allKeys = Array.from(new Set([...Object.keys(style1), ...Object.keys(style2)])) as (keyof TileStyle)[];\n\n  allKeys.forEach(key => {\n    if (key === 'blend') return;\n    const fromParent1 = style1[key] !== undefined;\n    const fromParent2 = style2[key] !== undefined;\n\n    if (fromParent1 && fromParent2) {\n      childStyle[key] = Math.random() < 0.5 ? style1[key] : style2[key];\n    } else if (fromParent1) {\n      childStyle[key] = style1[key];\n    } else if (fromParent2) {\n      childStyle[key] = style2[key];\n    }\n  });\n  return childStyle;\n};\n\nfunction App() {\n  const [palette, setPalette] = useState<TileStyle[]>([]);\n  const [grid, setGrid] = useState<GridCell[][]>(createEmptyGrid(16, 16));\n  const [selectedStyleIndices, setSelectedStyleIndices] = useState<number[]>([]);\n  const [activeAttributes, setActiveAttributes] = useState<ActiveAttribute[]>([]);\n  const [tileStyles, setTileStyles] = useState<TileStyle>(defaultTileStyle);\n  const [isBlendMode, setIsBlendMode] = useState(false);\n\n  useEffect(() => {\n    if (selectedStyleIndices.length !== 1) {\n      setTileStyles(defaultTileStyle);\n      setActiveAttributes([]);\n      return;\n    }\n    const selectedStyle = palette[selectedStyleIndices[0]];\n    setTileStyles(selectedStyle);\n\n    const newActiveAttributes: ActiveAttribute[] = [];\n    for (const key in selectedStyle) {\n      if (key !== 'blend') {\n        const definition = CSS_ATTRIBUTES.find(def => def.id === key);\n        if (definition) {\n          newActiveAttributes.push({ id: key, definition, value: selectedStyle[key as keyof TileStyle] });\n        }\n      }\n    }\n    setActiveAttributes(newActiveAttributes);\n\n  }, [selectedStyleIndices, palette]);\n\n  useEffect(() => {\n    const newStyles: React.CSSProperties = {};\n    activeAttributes.forEach(attr => {\n      const { definition, value } = attr;\n      switch (definition.id) {\n        case 'backgroundColor': newStyles.backgroundColor = value; break;\n        case 'backgroundImage': if (value && value.colors && value.colors.length >= 2) { newStyles.backgroundImage = buildGradientString(value); } break;\n        case 'border': if (value) { newStyles.border = `${value.width}px ${value.style} ${value.color}`; } break;\n        case 'borderTop': if (value) { newStyles.borderTop = `${value.width}px ${value.style} ${value.color}`; } break;\n        case 'borderRight': if (value) { newStyles.borderRight = `${value.width}px ${value.style} ${value.color}`; } break;\n        case 'borderBottom': if (value) { newStyles.borderBottom = `${value.width}px ${value.style} ${value.color}`; } break;\n        case 'borderLeft': if (value) { newStyles.borderLeft = `${value.width}px ${value.style} ${value.color}`; } break;\n        case 'borderRadius': newStyles.borderRadius = `${value}px`; break;\n        case 'opacity': newStyles.opacity = value; break;\n        case 'boxShadow': if (value) { newStyles.boxShadow = `${value.x}px ${value.y}px ${value.blur}px ${value.spread}px ${value.color}`; } break;\n        case 'transform': if (value) { newStyles.transform = buildTransformString(value); } break;\n        case 'filter': if (value) { newStyles.filter = buildFilterString(value); } break;\n        default: newStyles[definition.id as keyof React.CSSProperties] = value; break;\n      }\n    });\n    setTileStyles(newStyles);\n  }, [activeAttributes]);\n\n  const getRawStyleFromAttributes = (attributes: ActiveAttribute[]) => {\n    const rawStyle: TileStyle = {};\n    attributes.forEach(attr => {\n        rawStyle[attr.definition.id as keyof TileStyle] = attr.value;\n    });\n    return rawStyle;\n  };\n\n  const saveStyleToPalette = () => {\n    const rawStyle = getRawStyleFromAttributes(activeAttributes);\n    const finalStyle: TileStyle = { ...rawStyle, blend: isBlendMode };\n    \n    setPalette(prev => {\n      const newPalette = [...prev, finalStyle];\n      setSelectedStyleIndices([newPalette.length - 1]);\n      return newPalette;\n    });\n  };\n\n  const handleUpdate = () => {\n    if (selectedStyleIndices.length !== 1) return;\n    const rawStyle = getRawStyleFromAttributes(activeAttributes);\n    const updatedStyle = { ...rawStyle, blend: isBlendMode };\n    setPalette(prev => {\n      const newPalette = [...prev];\n      newPalette[selectedStyleIndices[0]] = updatedStyle;\n      return newPalette;\n    });\n  };\n\n  const handleEvolve = () => {\n    if (selectedStyleIndices.length !== 2) return;\n    const parent1 = palette[selectedStyleIndices[0]];\n    const parent2 = palette[selectedStyleIndices[1]];\n    const childStyle = evolveStyle(parent1, parent2);\n    setPalette(prev => {\n      const newPalette = [...prev, childStyle];\n      setSelectedStyleIndices([newPalette.length - 1]);\n      return newPalette;\n    });\n  };\n\n  const handleDelete = () => {\n    if (selectedStyleIndices.length === 0) return;\n\n    const sortedIndices = [...selectedStyleIndices].sort((a, b) => b - a);\n    let newPalette = [...palette];\n    sortedIndices.forEach(index => newPalette.splice(index, 1));\n\n    const indexMap = new Map<number, number | null>();\n    let newIndex = 0;\n    palette.forEach((_, oldIndex) => {\n      if (selectedStyleIndices.includes(oldIndex)) {\n        indexMap.set(oldIndex, null);\n      } else {\n        indexMap.set(oldIndex, newIndex++);\n      }\n    });\n\n    const newGrid = grid.map(row =>\n      row.map(cell => {\n        if (cell === null) return null;\n        return indexMap.get(cell) ?? null;\n      })\n    );\n\n    setPalette(newPalette);\n    setGrid(newGrid);\n    setSelectedStyleIndices([]);\n  };\n\n  const paintCell = (row: number, col: number) => {\n    if (selectedStyleIndices.length === 0) return;\n    const styleIndexToPaint = selectedStyleIndices[selectedStyleIndices.length - 1];\n    const newGrid = grid.map(r => [...r]);\n    if (newGrid[row] && newGrid[row][col] !== undefined) {\n      newGrid[row][col] = styleIndexToPaint;\n      setGrid(newGrid);\n    }\n  };\n\n  const clearGrid = () => {\n    const { length: rows, 0: { length: cols } } = grid;\n    setGrid(createEmptyGrid(rows, cols));\n  };\n\n  const randomizeGrid = () => {\n    if (palette.length === 0) return;\n    const { length: rows, 0: { length: cols } } = grid;\n    const newGrid = Array.from({ length: rows }, () => Array.from({ length: cols }, () => Math.random() > 0.7 ? null : Math.floor(Math.random() * palette.length)));\n    setGrid(newGrid);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header-sticky\">\n        <div className=\"large-logo-tile blinking-eye\" style={tileStyles}></div>\n        <h1 className=\"app-title\">Tile Monster</h1>\n        <StylePalette\n          palette={palette}\n          selectedStyleIndices={selectedStyleIndices}\n          setSelectedStyleIndices={setSelectedStyleIndices}\n          onUpdate={handleUpdate} \n          onEvolve={handleEvolve}\n          onDelete={handleDelete}\n        />\n      </header>\n\n      <main className=\"App-main\">\n        <div className=\"left-column\">\n          <TextureCreator\n            saveToPalette={saveStyleToPalette}\n            activeAttributes={activeAttributes}\n            setActiveAttributes={setActiveAttributes}\n            tileStyles={tileStyles}\n          />\n          <Preview\n            tileStyles={tileStyles}\n            isBlendMode={isBlendMode}\n            onBlendChange={setIsBlendMode}\n          />\n        </div>\n\n        <div className=\"center-column\">\n          <Sandbox\n            palette={palette}\n            grid={grid}\n            paintCell={paintCell}\n            clearGrid={clearGrid}\n            randomizeGrid={randomizeGrid}\n            setGrid={setGrid}\n          />\n        </div>\n\n        <div className=\"right-column\">\n          <Export palette={palette} grid={grid} />\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}