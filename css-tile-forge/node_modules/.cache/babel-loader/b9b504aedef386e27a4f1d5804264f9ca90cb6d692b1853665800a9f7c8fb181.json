{"ast":null,"code":"var _jsxFileName = \"/home/user/TileMonster/css-tile-forge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TextureCreator from './components/TextureCreator/TextureCreator';\nimport Sandbox from './components/Sandbox/Sandbox';\nimport Export from './components/Export/Export';\nimport StylePalette from './components/StylePalette/StylePalette';\nimport Preview from './components/Preview/Preview';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createEmptyGrid = (rows, cols) => Array.from({\n  length: rows\n}, () => Array(cols).fill(null));\nconst defaultTileStyle = {\n  backgroundColor: '#d3d3d3',\n  border: '2px solid darkgrey',\n  borderRadius: '8px'\n};\nfunction App() {\n  _s();\n  const [palette, setPalette] = useState([]);\n  const [grid, setGrid] = useState(createEmptyGrid(16, 16));\n  const [selectedStyleIndex, setSelectedStyleIndex] = useState(null);\n  const [activeAttributes, setActiveAttributes] = useState([]);\n  const [tileStyles, setTileStyles] = useState(defaultTileStyle);\n  const [isBlendMode, setIsBlendMode] = useState(false);\n  useEffect(() => {\n    // This effect to update tileStyles based on activeAttributes remains the same\n    const newStyles = {};\n    // ... (rest of the effect logic is unchanged)\n    setTileStyles(newStyles);\n  }, [activeAttributes]);\n  const saveStyleToPalette = () => {\n    const finalStyle = {\n      ...tileStyles,\n      blend: isBlendMode,\n      transform: tileStyles.transform\n    };\n    setPalette(prev => {\n      const newPalette = [...prev, finalStyle];\n      setSelectedStyleIndex(newPalette.length - 1);\n      return newPalette;\n    });\n  };\n  const paintCell = (row, col) => {\n    if (selectedStyleIndex === null) return;\n    const newGrid = grid.map(r => [...r]);\n    if (newGrid[row] && newGrid[row][col] !== undefined) {\n      newGrid[row][col] = selectedStyleIndex;\n      setGrid(newGrid);\n    }\n  };\n  const clearGrid = () => {\n    const {\n      length: rows,\n      0: {\n        length: cols\n      }\n    } = grid;\n    setGrid(createEmptyGrid(rows, cols));\n  };\n  const randomizeGrid = () => {\n    if (palette.length === 0) return;\n    const {\n      length: rows,\n      0: {\n        length: cols\n      }\n    } = grid;\n    const newGrid = Array.from({\n      length: rows\n    }, () => Array.from({\n      length: cols\n    }, () => Math.random() > 0.7 ? null : Math.floor(Math.random() * palette.length)));\n    setGrid(newGrid);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header-sticky\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"large-logo-tile\",\n        style: tileStyles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CSS-Tile-Forge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StylePalette, {\n        palette: palette,\n        selectedStyleIndex: selectedStyleIndex,\n        setSelectedStyleIndex: setSelectedStyleIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"App-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-column\",\n        children: [/*#__PURE__*/_jsxDEV(TextureCreator, {\n          saveToPalette: saveStyleToPalette,\n          activeAttributes: activeAttributes,\n          setActiveAttributes: setActiveAttributes,\n          tileStyles: tileStyles\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Preview, {\n          tileStyles: tileStyles,\n          isBlendMode: isBlendMode,\n          onBlendChange: setIsBlendMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-column\",\n        children: /*#__PURE__*/_jsxDEV(Sandbox, {\n          palette: palette,\n          grid: grid,\n          paintCell: paintCell,\n          clearGrid: clearGrid,\n          randomizeGrid: randomizeGrid,\n          setGrid: setGrid // Pass setGrid for resizing\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-column\",\n        children: /*#__PURE__*/_jsxDEV(Export, {\n          palette: palette,\n          grid: grid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"yYQ23XRW9nSjM2in6LaWjdenaxI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TextureCreator","Sandbox","Export","StylePalette","Preview","jsxDEV","_jsxDEV","createEmptyGrid","rows","cols","Array","from","length","fill","defaultTileStyle","backgroundColor","border","borderRadius","App","_s","palette","setPalette","grid","setGrid","selectedStyleIndex","setSelectedStyleIndex","activeAttributes","setActiveAttributes","tileStyles","setTileStyles","isBlendMode","setIsBlendMode","newStyles","saveStyleToPalette","finalStyle","blend","transform","prev","newPalette","paintCell","row","col","newGrid","map","r","undefined","clearGrid","randomizeGrid","Math","random","floor","className","children","style","fileName","_jsxFileName","lineNumber","columnNumber","saveToPalette","onBlendChange","_c","$RefreshReg$"],"sources":["/home/user/TileMonster/css-tile-forge/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TextureCreator from './components/TextureCreator/TextureCreator';\nimport Sandbox from './components/Sandbox/Sandbox';\nimport Export from './components/Export/Export';\nimport StylePalette from './components/StylePalette/StylePalette';\nimport Preview from './components/Preview/Preview';\nimport { TileStyle, ActiveAttribute } from './data/types';\nimport { buildTransformString } from './utils/styleHelpers';\nimport './App.css';\n\ntype GridCell = number | null;\nconst createEmptyGrid = (rows: number, cols: number): GridCell[][] => Array.from({ length: rows }, () => Array(cols).fill(null));\n\nconst defaultTileStyle: TileStyle = {\n  backgroundColor: '#d3d3d3',\n  border: '2px solid darkgrey',\n  borderRadius: '8px',\n};\n\nfunction App() {\n  const [palette, setPalette] = useState<TileStyle[]>([]);\n  const [grid, setGrid] = useState<GridCell[][]>(createEmptyGrid(16, 16));\n  const [selectedStyleIndex, setSelectedStyleIndex] = useState<number | null>(null);\n  const [activeAttributes, setActiveAttributes] = useState<ActiveAttribute[]>([]);\n  const [tileStyles, setTileStyles] = useState<TileStyle>(defaultTileStyle);\n  const [isBlendMode, setIsBlendMode] = useState(false);\n\n  useEffect(() => {\n    // This effect to update tileStyles based on activeAttributes remains the same\n    const newStyles: React.CSSProperties = {};\n    // ... (rest of the effect logic is unchanged)\n    setTileStyles(newStyles);\n  }, [activeAttributes]);\n\n  const saveStyleToPalette = () => {\n    const finalStyle: TileStyle = {\n      ...tileStyles,\n      blend: isBlendMode,\n      transform: tileStyles.transform,\n    };\n    setPalette(prev => {\n      const newPalette = [...prev, finalStyle];\n      setSelectedStyleIndex(newPalette.length - 1);\n      return newPalette;\n    });\n  };\n\n  const paintCell = (row: number, col: number) => {\n    if (selectedStyleIndex === null) return;\n    const newGrid = grid.map(r => [...r]);\n    if (newGrid[row] && newGrid[row][col] !== undefined) {\n        newGrid[row][col] = selectedStyleIndex;\n        setGrid(newGrid);\n    }\n  };\n\n  const clearGrid = () => {\n    const { length: rows, 0: { length: cols } } = grid;\n    setGrid(createEmptyGrid(rows, cols));\n  };\n\n  const randomizeGrid = () => {\n    if (palette.length === 0) return;\n    const { length: rows, 0: { length: cols } } = grid;\n    const newGrid = Array.from({ length: rows }, () => \n        Array.from({ length: cols }, () => \n            Math.random() > 0.7 ? null : Math.floor(Math.random() * palette.length)\n        )\n    );\n    setGrid(newGrid);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header-sticky\">\n        <div className=\"large-logo-tile\" style={tileStyles}></div>\n        <h1>CSS-Tile-Forge</h1>\n        <StylePalette\n          palette={palette}\n          selectedStyleIndex={selectedStyleIndex}\n          setSelectedStyleIndex={setSelectedStyleIndex}\n        />\n      </header>\n\n      <main className=\"App-main\">\n        <div className=\"left-column\">\n          <TextureCreator\n            saveToPalette={saveStyleToPalette}\n            activeAttributes={activeAttributes}\n            setActiveAttributes={setActiveAttributes}\n            tileStyles={tileStyles}\n          />\n          <Preview\n            tileStyles={tileStyles}\n            isBlendMode={isBlendMode}\n            onBlendChange={setIsBlendMode}\n          />\n        </div>\n\n        <div className=\"center-column\">\n          <Sandbox\n            palette={palette}\n            grid={grid}\n            paintCell={paintCell}\n            clearGrid={clearGrid}\n            randomizeGrid={randomizeGrid}\n            setGrid={setGrid} // Pass setGrid for resizing\n          />\n        </div>\n\n        <div className=\"right-column\">\n          <Export palette={palette} grid={grid} />\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}