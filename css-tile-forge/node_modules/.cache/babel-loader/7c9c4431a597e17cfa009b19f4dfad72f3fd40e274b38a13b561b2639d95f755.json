{"ast":null,"code":"var _jsxFileName = \"/home/user/TileMonster/css-tile-forge/src/components/Sandbox/Sandbox.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useLayoutEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MIN_GRID_SIZE = 16;\nconst MAX_GRID_SIZE = 64;\nconst ZOOM_LEVELS = [12, 18, 24]; // Cell sizes in pixels\n\nconst Sandbox = ({\n  palette,\n  grid,\n  paintCell,\n  clearGrid,\n  randomizeGrid,\n  setGrid\n}) => {\n  _s();\n  const [isPainting, setIsPainting] = useState(false);\n  const [showGridLines, setShowGridLines] = useState(true);\n  const [zoomLevel, setZoomLevel] = useState(1); // Index for ZOOM_LEVELS\n  const [gridDimensions, setGridDimensions] = useState({\n    rows: 0,\n    cols: 0\n  });\n  const gridContainerRef = useRef(null);\n  useLayoutEffect(() => {\n    const updateGridSize = () => {\n      if (gridContainerRef.current) {\n        const {\n          width,\n          height\n        } = gridContainerRef.current.getBoundingClientRect();\n        const cellSize = ZOOM_LEVELS[zoomLevel] + (showGridLines ? 1 : 0);\n        const newCols = Math.max(MIN_GRID_SIZE, Math.min(MAX_GRID_SIZE, Math.floor(width / cellSize)));\n        const newRows = Math.max(MIN_GRID_SIZE, Math.min(MAX_GRID_SIZE, Math.floor(height / cellSize)));\n        if (newRows !== gridDimensions.rows || newCols !== gridDimensions.cols) {\n          setGridDimensions({\n            rows: newRows,\n            cols: newCols\n          });\n\n          // Resize grid data, preserving existing painted cells\n          const newGrid = Array.from({\n            length: newRows\n          }, (_, r) => Array.from({\n            length: newCols\n          }, (_, c) => {\n            return r < grid.length && c < grid[0].length ? grid[r][c] : null;\n          }));\n          setGrid(newGrid);\n        }\n      }\n    };\n    updateGridSize(); // Initial calculation\n\n    const resizeObserver = new ResizeObserver(updateGridSize);\n    if (gridContainerRef.current) {\n      resizeObserver.observe(gridContainerRef.current);\n    }\n    return () => resizeObserver.disconnect();\n  }, [zoomLevel, showGridLines, grid, setGrid, gridDimensions.rows, gridDimensions.cols]);\n  const handleMouseDown = (rowIndex, cellIndex) => {\n    setIsPainting(true);\n    paintCell(rowIndex, cellIndex);\n  };\n  const handleMouseEnter = (rowIndex, cellIndex) => {\n    if (isPainting) {\n      paintCell(rowIndex, cellIndex);\n    }\n  };\n  const getCellStyle = (rowIndex, cellIndex) => {\n    var _grid$rowIndex;\n    const paletteIndex = (_grid$rowIndex = grid[rowIndex]) === null || _grid$rowIndex === void 0 ? void 0 : _grid$rowIndex[cellIndex];\n    const baseStyle = {\n      width: `${ZOOM_LEVELS[zoomLevel]}px`,\n      height: `${ZOOM_LEVELS[zoomLevel]}px`\n    };\n    if (paletteIndex === null || paletteIndex === undefined) {\n      return {\n        ...baseStyle,\n        backgroundColor: '#ddd'\n      };\n    }\n    const tileStyle = palette[paletteIndex];\n    return {\n      ...baseStyle,\n      ...tileStyle\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sandbox\",\n    onMouseUp: () => setIsPainting(false),\n    onMouseLeave: () => setIsPainting(false),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sandbox-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearGrid,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: randomizeGrid,\n        children: \"Randomize\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowGridLines(!showGridLines),\n        className: showGridLines ? 'active' : '',\n        children: \"Grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"zoom-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setZoomLevel(0),\n          className: zoomLevel === 0 ? 'active' : '',\n          children: \"1x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setZoomLevel(1),\n          className: zoomLevel === 1 ? 'active' : '',\n          children: \"2x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setZoomLevel(2),\n          className: zoomLevel === 2 ? 'active' : '',\n          children: \"3x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: `${gridDimensions.rows} Ã— ${gridDimensions.cols}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: gridContainerRef,\n      className: `sandbox-grid ${!showGridLines ? 'no-grid' : ''}`,\n      children: grid.slice(0, gridDimensions.rows).map((row, rowIndex) => row.slice(0, gridDimensions.cols).map((_, cellIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-cell\",\n        onMouseDown: () => handleMouseDown(rowIndex, cellIndex),\n        onMouseEnter: () => handleMouseEnter(rowIndex, cellIndex),\n        style: getCellStyle(rowIndex, cellIndex)\n      }, `${rowIndex}-${cellIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(Sandbox, \"ijS5kV5qqL4dzpIfIxZv2PEWai8=\");\n_c = Sandbox;\nexport default Sandbox;\nvar _c;\n$RefreshReg$(_c, \"Sandbox\");","map":{"version":3,"names":["React","useState","useRef","useLayoutEffect","jsxDEV","_jsxDEV","MIN_GRID_SIZE","MAX_GRID_SIZE","ZOOM_LEVELS","Sandbox","palette","grid","paintCell","clearGrid","randomizeGrid","setGrid","_s","isPainting","setIsPainting","showGridLines","setShowGridLines","zoomLevel","setZoomLevel","gridDimensions","setGridDimensions","rows","cols","gridContainerRef","updateGridSize","current","width","height","getBoundingClientRect","cellSize","newCols","Math","max","min","floor","newRows","newGrid","Array","from","length","_","r","c","resizeObserver","ResizeObserver","observe","disconnect","handleMouseDown","rowIndex","cellIndex","handleMouseEnter","getCellStyle","_grid$rowIndex","paletteIndex","baseStyle","undefined","backgroundColor","tileStyle","className","onMouseUp","onMouseLeave","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","slice","map","row","onMouseDown","onMouseEnter","style","_c","$RefreshReg$"],"sources":["/home/user/TileMonster/css-tile-forge/src/components/Sandbox/Sandbox.tsx"],"sourcesContent":["import React, { useState, useRef, useLayoutEffect } from 'react';\nimport { TileStyle } from '../../data/types';\n\ninterface SandboxProps {\n  palette: TileStyle[];\n  grid: (number | null)[][];\n  paintCell: (row: number, col: number) => void;\n  clearGrid: () => void;\n  randomizeGrid: () => void;\n  setGrid: (grid: (number | null)[][]) => void; // Add this to allow resizing\n}\n\nconst MIN_GRID_SIZE = 16;\nconst MAX_GRID_SIZE = 64;\nconst ZOOM_LEVELS = [12, 18, 24]; // Cell sizes in pixels\n\nconst Sandbox: React.FC<SandboxProps> = ({\n  palette,\n  grid,\n  paintCell,\n  clearGrid,\n  randomizeGrid,\n  setGrid,\n}) => {\n  const [isPainting, setIsPainting] = useState(false);\n  const [showGridLines, setShowGridLines] = useState(true);\n  const [zoomLevel, setZoomLevel] = useState(1); // Index for ZOOM_LEVELS\n  const [gridDimensions, setGridDimensions] = useState({ rows: 0, cols: 0 });\n  const gridContainerRef = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    const updateGridSize = () => {\n      if (gridContainerRef.current) {\n        const { width, height } = gridContainerRef.current.getBoundingClientRect();\n        const cellSize = ZOOM_LEVELS[zoomLevel] + (showGridLines ? 1 : 0);\n        \n        const newCols = Math.max(MIN_GRID_SIZE, Math.min(MAX_GRID_SIZE, Math.floor(width / cellSize)));\n        const newRows = Math.max(MIN_GRID_SIZE, Math.min(MAX_GRID_SIZE, Math.floor(height / cellSize)));\n\n        if (newRows !== gridDimensions.rows || newCols !== gridDimensions.cols) {\n          setGridDimensions({ rows: newRows, cols: newCols });\n\n          // Resize grid data, preserving existing painted cells\n          const newGrid = Array.from({ length: newRows }, (_, r) =>\n            Array.from({ length: newCols }, (_, c) => {\n              return r < grid.length && c < grid[0].length ? grid[r][c] : null;\n            })\n          );\n          setGrid(newGrid);\n        }\n      }\n    };\n\n    updateGridSize(); // Initial calculation\n\n    const resizeObserver = new ResizeObserver(updateGridSize);\n    if (gridContainerRef.current) {\n      resizeObserver.observe(gridContainerRef.current);\n    }\n\n    return () => resizeObserver.disconnect();\n  }, [zoomLevel, showGridLines, grid, setGrid, gridDimensions.rows, gridDimensions.cols]);\n\n  const handleMouseDown = (rowIndex: number, cellIndex: number) => {\n    setIsPainting(true);\n    paintCell(rowIndex, cellIndex);\n  };\n\n  const handleMouseEnter = (rowIndex: number, cellIndex: number) => {\n    if (isPainting) {\n      paintCell(rowIndex, cellIndex);\n    }\n  };\n\n  const getCellStyle = (rowIndex: number, cellIndex: number): React.CSSProperties => {\n    const paletteIndex = grid[rowIndex]?.[cellIndex];\n    const baseStyle: React.CSSProperties = {\n        width: `${ZOOM_LEVELS[zoomLevel]}px`,\n        height: `${ZOOM_LEVELS[zoomLevel]}px`,\n    };\n\n    if (paletteIndex === null || paletteIndex === undefined) {\n      return { ...baseStyle, backgroundColor: '#ddd' };\n    }\n    const tileStyle = palette[paletteIndex];\n    return { ...baseStyle, ...tileStyle };\n  };\n\n  return (\n    <div className=\"sandbox\" onMouseUp={() => setIsPainting(false)} onMouseLeave={() => setIsPainting(false)}>\n        <div className=\"sandbox-controls\">\n            <button onClick={clearGrid}>Clear</button>\n            <button onClick={randomizeGrid}>Randomize</button>\n            <button onClick={() => setShowGridLines(!showGridLines)} className={showGridLines ? 'active' : ''}>\n                Grid\n            </button>\n            <div className=\"zoom-controls\">\n                <button onClick={() => setZoomLevel(0)} className={zoomLevel === 0 ? 'active' : ''}>1x</button>\n                <button onClick={() => setZoomLevel(1)} className={zoomLevel === 1 ? 'active' : ''}>2x</button>\n                <button onClick={() => setZoomLevel(2)} className={zoomLevel === 2 ? 'active' : ''}>3x</button>\n            </div>\n            <span>{`${gridDimensions.rows} Ã— ${gridDimensions.cols}`}</span>\n        </div>\n      <div ref={gridContainerRef} className={`sandbox-grid ${!showGridLines ? 'no-grid' : ''}`}>\n        {grid.slice(0, gridDimensions.rows).map((row, rowIndex) =>\n          row.slice(0, gridDimensions.cols).map((_, cellIndex) => (\n            <div\n              key={`${rowIndex}-${cellIndex}`}\n              className=\"grid-cell\"\n              onMouseDown={() => handleMouseDown(rowIndex, cellIndex)}\n              onMouseEnter={() => handleMouseEnter(rowIndex, cellIndex)}\n              style={getCellStyle(rowIndex, cellIndex)}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Sandbox;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}