{"ast":null,"code":"var _jsxFileName = \"/home/user/TileMonster/css-tile-forge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TextureCreator from './components/TextureCreator/TextureCreator';\nimport Sandbox from './components/Sandbox/Sandbox';\nimport Export from './components/Export/Export';\nimport StylePalette from './components/StylePalette/StylePalette';\nimport Preview from './components/Preview/Preview';\nimport { buildCompleteStyle } from './utils/styleHelpers';\nimport './App.css';\nimport { CSS_ATTRIBUTES } from './data/css-attributes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createEmptyGrid = (rows, cols) => Array.from({\n  length: rows\n}, () => Array(cols).fill(null));\nconst defaultTileStyle = {\n  backgroundColor: '#d3d3d3',\n  border: '2px solid darkgrey',\n  borderRadius: '8px'\n};\nconst evolveStyle = (style1, style2) => {\n  const childStyle = {};\n  const allKeys = Array.from(new Set([...Object.keys(style1), ...Object.keys(style2)]));\n  allKeys.forEach(key => {\n    if (key === 'blend') return;\n    const fromParent1 = style1[key] !== undefined;\n    const fromParent2 = style2[key] !== undefined;\n    if (fromParent1 && fromParent2) {\n      childStyle[key] = Math.random() < 0.5 ? style1[key] : style2[key];\n    } else if (fromParent1) {\n      childStyle[key] = style1[key];\n    } else if (fromParent2) {\n      childStyle[key] = style2[key];\n    }\n  });\n  return childStyle;\n};\nfunction App() {\n  _s();\n  const [palette, setPalette] = useState([]);\n  const [grid, setGrid] = useState(createEmptyGrid(16, 16));\n  const [selectedStyleIndices, setSelectedStyleIndices] = useState([]);\n  const [activeAttributes, setActiveAttributes] = useState([]);\n  const [tileStyles, setTileStyles] = useState(defaultTileStyle);\n  const [isBlendMode, setIsBlendMode] = useState(false);\n  useEffect(() => {\n    if (selectedStyleIndices.length !== 1) {\n      const newActiveAttributes = [];\n      for (const key in defaultTileStyle) {\n        if (key !== 'blend') {\n          const definition = CSS_ATTRIBUTES.find(def => def.id === key);\n          if (definition) {\n            newActiveAttributes.push({\n              id: key,\n              definition,\n              value: defaultTileStyle[key]\n            });\n          }\n        }\n      }\n      setActiveAttributes(newActiveAttributes);\n    } else {\n      const selectedStyle = palette[selectedStyleIndices[0]];\n      const newActiveAttributes = [];\n      for (const key in selectedStyle) {\n        if (key !== 'blend') {\n          const definition = CSS_ATTRIBUTES.find(def => def.id === key);\n          if (definition) {\n            newActiveAttributes.push({\n              id: key,\n              definition,\n              value: selectedStyle[key]\n            });\n          }\n        }\n      }\n      setActiveAttributes(newActiveAttributes);\n    }\n  }, [selectedStyleIndices, palette]);\n  useEffect(() => {\n    const rawStyle = getRawStyleFromAttributes(activeAttributes);\n    const completeStyle = buildCompleteStyle(rawStyle);\n    setTileStyles(completeStyle);\n  }, [activeAttributes]);\n  const getRawStyleFromAttributes = attributes => {\n    const rawStyle = {};\n    attributes.forEach(attr => {\n      rawStyle[attr.definition.id] = attr.value;\n    });\n    return rawStyle;\n  };\n  const saveStyleToPalette = () => {\n    const rawStyle = getRawStyleFromAttributes(activeAttributes);\n    const finalStyle = {\n      ...rawStyle,\n      blend: isBlendMode\n    };\n    setPalette(prev => {\n      const newPalette = [...prev, finalStyle];\n      setSelectedStyleIndices([newPalette.length - 1]);\n      return newPalette;\n    });\n  };\n  const handleUpdate = () => {\n    if (selectedStyleIndices.length !== 1) return;\n    const rawStyle = getRawStyleFromAttributes(activeAttributes);\n    const updatedStyle = {\n      ...rawStyle,\n      blend: isBlendMode\n    };\n    setPalette(prev => {\n      const newPalette = [...prev];\n      newPalette[selectedStyleIndices[0]] = updatedStyle;\n      return newPalette;\n    });\n  };\n  const handleEvolve = () => {\n    if (selectedStyleIndices.length !== 2) return;\n    const parent1 = palette[selectedStyleIndices[0]];\n    const parent2 = palette[selectedStyleIndices[1]];\n    const childStyle = evolveStyle(parent1, parent2);\n    setPalette(prev => {\n      const newPalette = [...prev, childStyle];\n      setSelectedStyleIndices([newPalette.length - 1]);\n      return newPalette;\n    });\n  };\n  const handleDelete = () => {\n    if (selectedStyleIndices.length === 0) return;\n    const sortedIndices = [...selectedStyleIndices].sort((a, b) => b - a);\n    let newPalette = [...palette];\n    sortedIndices.forEach(index => newPalette.splice(index, 1));\n    const indexMap = new Map();\n    let newIndex = 0;\n    palette.forEach((_, oldIndex) => {\n      if (selectedStyleIndices.includes(oldIndex)) {\n        indexMap.set(oldIndex, null);\n      } else {\n        indexMap.set(oldIndex, newIndex++);\n      }\n    });\n    const newGrid = grid.map(row => row.map(cell => {\n      var _indexMap$get;\n      if (cell === null) return null;\n      return (_indexMap$get = indexMap.get(cell)) !== null && _indexMap$get !== void 0 ? _indexMap$get : null;\n    }));\n    setPalette(newPalette);\n    setGrid(newGrid);\n    setSelectedStyleIndices([]);\n  };\n  const paintCell = (row, col) => {\n    if (selectedStyleIndices.length === 0) return;\n    const styleIndexToPaint = selectedStyleIndices[selectedStyleIndices.length - 1];\n    const newGrid = grid.map(r => [...r]);\n    if (newGrid[row] && newGrid[row][col] !== undefined) {\n      newGrid[row][col] = styleIndexToPaint;\n      setGrid(newGrid);\n    }\n  };\n  const clearGrid = () => {\n    const {\n      length: rows,\n      0: {\n        length: cols\n      }\n    } = grid;\n    setGrid(createEmptyGrid(rows, cols));\n  };\n  const randomizeGrid = () => {\n    if (palette.length === 0) return;\n    const {\n      length: rows,\n      0: {\n        length: cols\n      }\n    } = grid;\n    const newGrid = Array.from({\n      length: rows\n    }, () => Array.from({\n      length: cols\n    }, () => Math.floor(Math.random() * palette.length)));\n    setGrid(newGrid);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header-sticky\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"large-logo-tile blinking-eye\",\n        style: tileStyles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"app-title\",\n        children: \"Tile Monster\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StylePalette, {\n        palette: palette,\n        selectedStyleIndices: selectedStyleIndices,\n        setSelectedStyleIndices: setSelectedStyleIndices,\n        onUpdate: handleUpdate,\n        onEvolve: handleEvolve,\n        onDelete: handleDelete,\n        livePreviewStyle: tileStyles // Pass the live style here\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"App-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-column\",\n        children: [/*#__PURE__*/_jsxDEV(TextureCreator, {\n          saveToPalette: saveStyleToPalette,\n          activeAttributes: activeAttributes,\n          setActiveAttributes: setActiveAttributes,\n          tileStyles: tileStyles\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Preview, {\n          tileStyles: tileStyles,\n          isBlendMode: isBlendMode,\n          onBlendChange: setIsBlendMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-column\",\n        children: /*#__PURE__*/_jsxDEV(Sandbox, {\n          palette: palette,\n          grid: grid,\n          paintCell: paintCell,\n          clearGrid: clearGrid,\n          randomizeGrid: randomizeGrid,\n          setGrid: setGrid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-column\",\n        children: /*#__PURE__*/_jsxDEV(Export, {\n          palette: palette,\n          grid: grid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"i5aPpgKn52j0ZaCnTw9IRmR5VsA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TextureCreator","Sandbox","Export","StylePalette","Preview","buildCompleteStyle","CSS_ATTRIBUTES","jsxDEV","_jsxDEV","createEmptyGrid","rows","cols","Array","from","length","fill","defaultTileStyle","backgroundColor","border","borderRadius","evolveStyle","style1","style2","childStyle","allKeys","Set","Object","keys","forEach","key","fromParent1","undefined","fromParent2","Math","random","App","_s","palette","setPalette","grid","setGrid","selectedStyleIndices","setSelectedStyleIndices","activeAttributes","setActiveAttributes","tileStyles","setTileStyles","isBlendMode","setIsBlendMode","newActiveAttributes","definition","find","def","id","push","value","selectedStyle","rawStyle","getRawStyleFromAttributes","completeStyle","attributes","attr","saveStyleToPalette","finalStyle","blend","prev","newPalette","handleUpdate","updatedStyle","handleEvolve","parent1","parent2","handleDelete","sortedIndices","sort","a","b","index","splice","indexMap","Map","newIndex","_","oldIndex","includes","set","newGrid","map","row","cell","_indexMap$get","get","paintCell","col","styleIndexToPaint","r","clearGrid","randomizeGrid","floor","className","children","style","fileName","_jsxFileName","lineNumber","columnNumber","onUpdate","onEvolve","onDelete","livePreviewStyle","saveToPalette","onBlendChange","_c","$RefreshReg$"],"sources":["/home/user/TileMonster/css-tile-forge/src/App.tsx"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport TextureCreator from './components/TextureCreator/TextureCreator';\nimport Sandbox from './components/Sandbox/Sandbox';\nimport Export from './components/Export/Export';\nimport StylePalette from './components/StylePalette/StylePalette';\nimport Preview from './components/Preview/Preview';\nimport { TileStyle, ActiveAttribute } from './data/types';\nimport { buildCompleteStyle } from './utils/styleHelpers';\nimport './App.css';\nimport { CSS_ATTRIBUTES } from './data/css-attributes';\n\ntype GridCell = number | null;\nconst createEmptyGrid = (rows: number, cols: number): GridCell[][] => Array.from({ length: rows }, () => Array(cols).fill(null));\n\nconst defaultTileStyle: TileStyle = {\n  backgroundColor: '#d3d3d3',\n  border: '2px solid darkgrey',\n  borderRadius: '8px',\n};\n\nconst evolveStyle = (style1: TileStyle, style2: TileStyle): TileStyle => {\n  const childStyle: TileStyle = {};\n  const allKeys = Array.from(new Set([...Object.keys(style1), ...Object.keys(style2)])) as (keyof TileStyle)[];\n\n  allKeys.forEach(key => {\n    if (key === 'blend') return;\n    const fromParent1 = style1[key] !== undefined;\n    const fromParent2 = style2[key] !== undefined;\n\n    if (fromParent1 && fromParent2) {\n      childStyle[key] = Math.random() < 0.5 ? style1[key] : style2[key];\n    } else if (fromParent1) {\n      childStyle[key] = style1[key];\n    } else if (fromParent2) {\n      childStyle[key] = style2[key];\n    }\n  });\n  return childStyle;\n};\n\nfunction App() {\n  const [palette, setPalette] = useState<TileStyle[]>([]);\n  const [grid, setGrid] = useState<GridCell[][]>(createEmptyGrid(16, 16));\n  const [selectedStyleIndices, setSelectedStyleIndices] = useState<number[]>([]);\n  const [activeAttributes, setActiveAttributes] = useState<ActiveAttribute[]>([]);\n  const [tileStyles, setTileStyles] = useState<TileStyle>(defaultTileStyle);\n  const [isBlendMode, setIsBlendMode] = useState(false);\n\n  useEffect(() => {\n    if (selectedStyleIndices.length !== 1) {\n      const newActiveAttributes: ActiveAttribute[] = [];\n      for (const key in defaultTileStyle) {\n        if (key !== 'blend') {\n          const definition = CSS_ATTRIBUTES.find(def => def.id === key);\n          if (definition) {\n            newActiveAttributes.push({ id: key, definition, value: defaultTileStyle[key as keyof TileStyle] });\n          }\n        }\n      }\n      setActiveAttributes(newActiveAttributes);\n    } else {\n      const selectedStyle = palette[selectedStyleIndices[0]];\n      const newActiveAttributes: ActiveAttribute[] = [];\n      for (const key in selectedStyle) {\n        if (key !== 'blend') {\n          const definition = CSS_ATTRIBUTES.find(def => def.id === key);\n          if (definition) {\n            newActiveAttributes.push({ id: key, definition, value: selectedStyle[key as keyof TileStyle] });\n          }\n        }\n      }\n      setActiveAttributes(newActiveAttributes);\n    }\n  }, [selectedStyleIndices, palette]);\n\n  useEffect(() => {\n    const rawStyle = getRawStyleFromAttributes(activeAttributes);\n    const completeStyle = buildCompleteStyle(rawStyle);\n    setTileStyles(completeStyle);\n  }, [activeAttributes]);\n\n  const getRawStyleFromAttributes = (attributes: ActiveAttribute[]) => {\n    const rawStyle: TileStyle = {};\n    attributes.forEach(attr => {\n        rawStyle[attr.definition.id as keyof TileStyle] = attr.value;\n    });\n    return rawStyle;\n  };\n\n  const saveStyleToPalette = () => {\n    const rawStyle = getRawStyleFromAttributes(activeAttributes);\n    const finalStyle: TileStyle = { ...rawStyle, blend: isBlendMode };\n    \n    setPalette(prev => {\n      const newPalette = [...prev, finalStyle];\n      setSelectedStyleIndices([newPalette.length - 1]);\n      return newPalette;\n    });\n  };\n\n  const handleUpdate = () => {\n    if (selectedStyleIndices.length !== 1) return;\n    const rawStyle = getRawStyleFromAttributes(activeAttributes);\n    const updatedStyle = { ...rawStyle, blend: isBlendMode };\n    setPalette(prev => {\n      const newPalette = [...prev];\n      newPalette[selectedStyleIndices[0]] = updatedStyle;\n      return newPalette;\n    });\n  };\n\n  const handleEvolve = () => {\n    if (selectedStyleIndices.length !== 2) return;\n    const parent1 = palette[selectedStyleIndices[0]];\n    const parent2 = palette[selectedStyleIndices[1]];\n    const childStyle = evolveStyle(parent1, parent2);\n    setPalette(prev => {\n      const newPalette = [...prev, childStyle];\n      setSelectedStyleIndices([newPalette.length - 1]);\n      return newPalette;\n    });\n  };\n\n  const handleDelete = () => {\n    if (selectedStyleIndices.length === 0) return;\n\n    const sortedIndices = [...selectedStyleIndices].sort((a, b) => b - a);\n    let newPalette = [...palette];\n    sortedIndices.forEach(index => newPalette.splice(index, 1));\n\n    const indexMap = new Map<number, number | null>();\n    let newIndex = 0;\n    palette.forEach((_, oldIndex) => {\n      if (selectedStyleIndices.includes(oldIndex)) {\n        indexMap.set(oldIndex, null);\n      } else {\n        indexMap.set(oldIndex, newIndex++);\n      }\n    });\n\n    const newGrid = grid.map(row =>\n      row.map(cell => {\n        if (cell === null) return null;\n        return indexMap.get(cell) ?? null;\n      })\n    );\n\n    setPalette(newPalette);\n    setGrid(newGrid);\n    setSelectedStyleIndices([]);\n  };\n\n  const paintCell = (row: number, col: number) => {\n    if (selectedStyleIndices.length === 0) return;\n    const styleIndexToPaint = selectedStyleIndices[selectedStyleIndices.length - 1];\n    const newGrid = grid.map(r => [...r]);\n    if (newGrid[row] && newGrid[row][col] !== undefined) {\n      newGrid[row][col] = styleIndexToPaint;\n      setGrid(newGrid);\n    }\n  };\n\n  const clearGrid = () => {\n    const { length: rows, 0: { length: cols } } = grid;\n    setGrid(createEmptyGrid(rows, cols));\n  };\n\n  const randomizeGrid = () => {\n    if (palette.length === 0) return;\n    const { length: rows, 0: { length: cols } } = grid;\n    const newGrid = Array.from({ length: rows }, () => Array.from({ length: cols }, () => Math.floor(Math.random() * palette.length)));\n    setGrid(newGrid);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header-sticky\">\n        <div className=\"large-logo-tile blinking-eye\" style={tileStyles}></div>\n        <h1 className=\"app-title\">Tile Monster</h1>\n        <StylePalette\n          palette={palette}\n          selectedStyleIndices={selectedStyleIndices}\n          setSelectedStyleIndices={setSelectedStyleIndices}\n          onUpdate={handleUpdate} \n          onEvolve={handleEvolve}\n          onDelete={handleDelete}\n          livePreviewStyle={tileStyles} // Pass the live style here\n        />\n      </header>\n\n      <main className=\"App-main\">\n        <div className=\"left-column\">\n          <TextureCreator\n            saveToPalette={saveStyleToPalette}\n            activeAttributes={activeAttributes}\n            setActiveAttributes={setActiveAttributes}\n            tileStyles={tileStyles}\n          />\n          <Preview\n            tileStyles={tileStyles}\n            isBlendMode={isBlendMode}\n            onBlendChange={setIsBlendMode}\n          />\n        </div>\n\n        <div className=\"center-column\">\n          <Sandbox\n            palette={palette}\n            grid={grid}\n            paintCell={paintCell}\n            clearGrid={clearGrid}\n            randomizeGrid={randomizeGrid}\n            setGrid={setGrid}\n          />\n        </div>\n\n        <div className=\"right-column\">\n          <Export palette={palette} grid={grid} />\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}